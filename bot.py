import telebot
from telebot import types
import sqlite3
from threading import Thread
from flask import Flask
from config import *

bot = telebot.TeleBot(BOT_TOKEN)

# ---------------- Database ----------------
def init_db():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        points INTEGER DEFAULT 0,
        video_count INTEGER DEFAULT 0,
        daily_points INTEGER DEFAULT 0,
        ref_id INTEGER
    )''')
    cur.execute('''CREATE TABLE IF NOT EXISTS submitted_links (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        url TEXT,
        status TEXT DEFAULT 'pending',
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )''')
    conn.commit()
    conn.close()

init_db()

# ---------------- User Check ----------------
def check_user(user_id, ref_id=None):
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()
    if not user:
        initial_points = REFERRAL_POINTS if ref_id else 0
        cur.execute("INSERT INTO users (user_id, points, video_count, daily_points, ref_id) VALUES (?, ?, ?, ?, ?)",
                    (user_id, initial_points, 0, initial_points, ref_id))
        conn.commit()
        if ref_id:
            cur.execute("UPDATE users SET points = points + ?, daily_points = daily_points + ? WHERE user_id=?",
                        (REFERRAL_POINTS, REFERRAL_POINTS, ref_id))
            conn.commit()
            bot.send_message(ref_id, f"ЁЯОЙ рдЖрдкрдХреЗ referral рд╕реЗ рдирдП user рдиреЗ join рдХрд┐рдпрд╛! рдЖрдкрдХреЛ {REFERRAL_POINTS} рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓реЗред")
    conn.close()

# ---------------- /start ----------------
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
    check_user(user_id, ref_id)

    welcome_text = f"""
ЁЯОм Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯОм

рдирдорд╕реНрддреЗ {message.from_user.first_name}!

ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЛ, рдХреЙрдЗрди рдХрдорд╛рдУ рдФрд░  
ЁЯТ░ YouTube link submit рдХрд░реЛ тЬЕ  

ЁЯУМ рдХрдорд╛рдИ рдирд┐рдпрдо:
тАв рдкреНрд░рддреНрдпреЗрдХ рд╡реАрдбрд┐рдпреЛ = {VIDEO_POINTS} рдкреЙрдЗрдВрдЯреНрд╕  
тАв рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ = {DAILY_POINT_LIMIT} рдкреЙрдЗрдВрдЯреНрд╕  
тАв рд▓рд┐рдВрдХ submit cost = {LINK_SUBMIT_COST} Coin  

ЁЯСе рд░реЗрдлрд░рд▓ рд╕рд┐рд╕реНрдЯрдо:  
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ  
тАв рд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ {REFERRAL_POINTS} рдкреЙрдЗрдВрдЯреНрд╕  

тЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдмреЙрдЯ рдпреВрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░рдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред  

рдЖрдкрдХрд╛ ID: {user_id}
"""

    markup = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("ЁЯЪА Open WebApp", web_app=types.WebAppInfo(WEB_URL))
    markup.add(web_btn)
    bot.send_message(user_id, welcome_text, reply_markup=markup)

    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("ЁЯУК рдкреНрд░реЛрдлрд╛рдЗрд▓", "ЁЯОБ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдУ")
    menu.row("ЁЯТ░ Wallet", "ЁЯФЧ Invite Friends")
    menu.row("ЁЯТ╗ Submit YouTube Link")
    bot.send_message(user_id, "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ рдЖрдЧреЗ рдмрдврд╝реЗрдВ:", reply_markup=menu)

# ---------------- Handle Messages ----------------
@bot.message_handler(func=lambda msg: True)
def handle_all(message):
    user_id = message.from_user.id
    check_user(user_id)
    text = message.text
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cur = conn.cursor()

    if text == "ЁЯУК рдкреНрд░реЛрдлрд╛рдЗрд▓":
        cur.execute("SELECT points, daily_points FROM users WHERE user_id=?", (user_id,))
        points, dpoints = cur.fetchone() or (0,0)
        ref_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        bot.reply_to(message, f"ЁЯСд рдЖрдкрдХреЗ рдкреЙрдЗрдВрдЯреНрд╕: {points}\nЁЯУЕ рдЖрдЬ рдЖрдкрдиреЗ {dpoints}/{DAILY_POINT_LIMIT} рдкреЙрдЗрдВрдЯреНрд╕ рдХрдорд╛рдПред\n\nЁЯФЧ рдЖрдкрдХрд╛ Referral Link:\n{ref_link}")

    elif text == "ЁЯОБ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдУ":
        cur.execute("SELECT points, daily_points FROM users WHERE user_id=?", (user_id,))
        points, dpoints = cur.fetchone() or (0,0)
        if dpoints + VIDEO_POINTS <= DAILY_POINT_LIMIT:
            cur.execute("UPDATE users SET points=?, daily_points=? WHERE user_id=?",
                        (points + VIDEO_POINTS, dpoints + VIDEO_POINTS, user_id))
            conn.commit()
            bot.reply_to(message, f"тЬЕ рдЖрдкрдХреЛ {VIDEO_POINTS} рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓реЗ! (рдЖрдЬ {dpoints + VIDEO_POINTS}/{DAILY_POINT_LIMIT})")
        else:
            bot.reply_to(message, "тЪая╕П рдЖрдЬ рдХреА рдкреЙрдЗрдВрдЯреНрд╕ рд▓рд┐рдорд┐рдЯ рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИред рдХрд▓ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!")

    elif text == "ЁЯТ░ Wallet":
        cur.execute("SELECT points FROM users WHERE user_id=?", (user_id,))
        points = cur.fetchone()[0] if cur.fetchone() else 0
        bot.reply_to(message, f"ЁЯТ╡ рдЖрдкрдХреЗ Wallet рдореЗрдВ рдкреЙрдЗрдВрдЯреНрд╕: {points}")

    elif text == "ЁЯФЧ Invite Friends":
        invite_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        bot.reply_to(message, f"рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рдХреЛ invite рдХрд░реЗрдВ рдФрд░ {REFERRAL_POINTS} рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдПрдВ:\n{invite_link}")

    elif text == "ЁЯТ╗ Submit YouTube Link":
        bot.send_message(user_id, f"рдЕрдкрдирд╛ YouTube link рднреЗрдЬреЗрдВред {LINK_SUBMIT_COST} Coin рдХрдЯреЗрдВрдЧреЗред")
        bot.register_next_step_handler(message, handle_link_submission)

    conn.close()

# ---------------- Handle Link Submission ----------------
def handle_link_submission(message):
    user_id = message.from_user.id
    url = message.text.strip()
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cur = conn.cursor()
    cur.execute("SELECT points FROM users WHERE user_id=?", (user_id,))
    points = cur.fetchone()[0] if cur.fetchone() else 0
    if points < LINK_SUBMIT_COST:
        bot.reply_to(message, f"тЪая╕П рдЖрдкрдХреЗ рдкрд╛рд╕ рдкрд░реНрдпрд╛рдкреНрдд Coin рдирд╣реАрдВ рд╣реИрдВред {LINK_SUBMIT_COST} Coin рдЪрд╛рд╣рд┐рдПред")
        conn.close()
        return
    cur.execute("UPDATE users SET points = points - ? WHERE user_id=?", (LINK_SUBMIT_COST, user_id))
    cur.execute("INSERT INTO submitted_links (user_id, url) VALUES (?, ?)", (user_id, url))
    conn.commit()
    conn.close()
    bot.reply_to(message, f"тЬЕ рдЖрдкрдХрд╛ link submit рд╣реЛ рдЧрдпрд╛ рд╣реИ! {LINK_SUBMIT_COST} Coin рдХрдЯ рдЧрдПред Admin approval рдХрд╛ рдЗрдВрддрдЬрд╛рд░ рдХрд░реЗрдВред")
    bot.send_message(ADMIN_ID, f"ЁЯЖХ рдирдпрд╛ YouTube link submit рд╣реБрдЖ:\nUser: {user_id}\nURL: {url}\nЁЯТ░ {LINK_SUBMIT_COST} Coin deducted")

# ---------------- Admin Links ----------------
@bot.message_handler(commands=['links'])
def admin_links(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "тЫФ рдпрд╣ Admin рдХреЗ рд▓рд┐рдП рд╣реИред")
        return
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, url, status FROM submitted_links WHERE status='pending'")
    links = cur.fetchall()
    if not links:
        bot.reply_to(message, "ЁЯОЙ рдХреЛрдИ pending link рдирд╣реАрдВ рд╣реИред")
    else:
        text = "тП│ Pending links:\n\n"
        for link in links:
            text += f"ID: {link[0]}\nUser: {link[1]}\nURL: {link[2]}\nStatus: {link[3]}\n\n"
        bot.reply_to(message, text)
    conn.close()

# ---------------- Flask Keep-Alive ----------------
app = Flask('')

@app.route('/')
def home():
    return "Bot is running!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

keep_alive()
bot.infinity_polling()