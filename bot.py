# bot.py
import telebot
from telebot import types
import sqlite3
from config import BOT_TOKEN, ADMIN_ID, WEB_URL
from keep_alive import keep_alive

# ===== Bot Config =====
DAILY_POINT_LIMIT = 100
VIDEO_POINTS = 30
REFERRAL_POINTS = 100
BOT_USERNAME = "Bingyt_bot"

bot = telebot.TeleBot(BOT_TOKEN)

# ===== Database Setup =====
conn = sqlite3.connect("bot_data.db", check_same_thread=False)
cur = conn.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    points INTEGER DEFAULT 0,
    video_count INTEGER DEFAULT 0,
    daily_points INTEGER DEFAULT 0,
    ref_id INTEGER,
    url_submitted INTEGER DEFAULT 0
)''')
conn.commit()

# ===== Keep Bot Alive =====
keep_alive()

# ===== User Check / Create =====
def check_user(user_id, ref_id=None):
    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()
    if not user:
        initial_points = REFERRAL_POINTS if ref_id else 0
        cur.execute("INSERT INTO users (user_id, points, video_count, daily_points, ref_id) VALUES (?, ?, ?, ?, ?)",
                    (user_id, initial_points, 0, initial_points, ref_id))
        conn.commit()
        if ref_id:
            cur.execute("UPDATE users SET points = points + ?, daily_points = daily_points + ? WHERE user_id=?",
                        (REFERRAL_POINTS, REFERRAL_POINTS, ref_id))
            conn.commit()
            bot.send_message(ref_id, f"ЁЯОЙ рдЖрдкрдХреЗ referral рд╕реЗ рдирдП user рдиреЗ join рдХрд┐рдпрд╛! рдЖрдкрдХреЛ {REFERRAL_POINTS} рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓реЗред")

# ===== /start Command =====
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
    check_user(user_id, ref_id)

    welcome_text = f"""
ЁЯОм Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯОм

рдирдорд╕реНрддреЗ {message.from_user.first_name}!

ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЛ, рдХреЙрдЗрди рдХрдорд╛рдУ рдФрд░  
ЁЯТ░ рдЕрдкрдирд╛ YouTube рдЪреИрдирд▓ рдореЛрдиреЗрдЯрд╛рдЗрдЬреЗрд╢рди рдХрд░рд╡рд╛рдУ тЬЕ  

ЁЯУМ рдХрдорд╛рдИ рдирд┐рдпрдо:
тАв рдкреНрд░рддреНрдпреЗрдХ рд╡реАрдбрд┐рдпреЛ = {VIDEO_POINTS} рдкреЙрдЗрдВрдЯреНрд╕  
тАв рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ = {DAILY_POINT_LIMIT} рдкреЙрдЗрдВрдЯреНрд╕  

ЁЯСе рд░реЗрдлрд░рд▓ рд╕рд┐рд╕реНрдЯрдо:  
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ  
тАв рд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ {REFERRAL_POINTS} рдкреЙрдЗрдВрдЯреНрд╕  

тЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдмреЙрдЯ рдпреВрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░рдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред  

рдЖрдкрдХрд╛ ID: {user_id}
"""

    markup = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("ЁЯЪА Open WebApp", web_app=types.WebAppInfo(WEB_URL))
    invite_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
    invite_btn = types.InlineKeyboardButton("ЁЯФЧ Invite Friends", url=invite_link)
    markup.add(web_btn, invite_btn)
    bot.send_message(user_id, welcome_text, reply_markup=markup)

    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("ЁЯУК рдкреНрд░реЛрдлрд╛рдЗрд▓", "ЁЯОБ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдУ")
    menu.row("ЁЯТ░ Wallet", "ЁЯУд Submit URL")
    bot.send_message(user_id, "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ рдЖрдЧреЗ рдмрдврд╝реЗрдВ:", reply_markup=menu)

# ===== Menu Handler =====
@bot.message_handler(func=lambda msg: True)
def handle_all(message):
    user_id = message.from_user.id
    check_user(user_id)
    text = message.text

    if text == "ЁЯУК рдкреНрд░реЛрдлрд╛рдЗрд▓":
        cur.execute("SELECT points, daily_points FROM users WHERE user_id=?", (user_id,))
        points, dpoints = cur.fetchone()
        ref_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        bot.reply_to(message, f"ЁЯСд рдЖрдкрдХреЗ рдкреЙрдЗрдВрдЯреНрд╕: {points}\nЁЯУЕ рдЖрдЬ рдЖрдкрдиреЗ {dpoints}/{DAILY_POINT_LIMIT} рдкреЙрдЗрдВрдЯреНрд╕ рдХрдорд╛рдПред\n\nЁЯФЧ рдЖрдкрдХрд╛ Referral Link:\n{ref_link}")

    elif text == "ЁЯОБ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдУ":
        cur.execute("SELECT points, daily_points FROM users WHERE user_id=?", (user_id,))
        points, dpoints = cur.fetchone()
        if dpoints + VIDEO_POINTS <= DAILY_POINT_LIMIT:
            new_points = points + VIDEO_POINTS
            new_dpoints = dpoints + VIDEO_POINTS
            cur.execute("UPDATE users SET points=?, daily_points=? WHERE user_id=?", 
                        (new_points, new_dpoints, user_id))
            conn.commit()
            bot.reply_to(message, f"тЬЕ рдЖрдкрдХреЛ {VIDEO_POINTS} рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓реЗ! (рдЖрдЬ {new_dpoints}/{DAILY_POINT_LIMIT})")
        else:
            bot.reply_to(message, "тЪая╕П рдЖрдЬ рдХреА рдкреЙрдЗрдВрдЯреНрд╕ рд▓рд┐рдорд┐рдЯ рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИред рдХрд▓ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!")

    elif text == "ЁЯТ░ Wallet":
        cur.execute("SELECT points FROM users WHERE user_id=?", (user_id,))
        points = cur.fetchone()[0]
        bot.reply_to(message, f"ЁЯТ╡ рдЖрдкрдХреЗ Wallet рдореЗрдВ рдкреЙрдЗрдВрдЯреНрд╕: {points}")

    elif text == "ЁЯУд Submit URL":
        cur.execute("SELECT points, url_submitted FROM users WHERE user_id=?", (user_id,))
        points, url_submitted = cur.fetchone()
        if points < 1280:
            bot.send_message(user_id, "тЪая╕П рдЖрдкрдХреЗ Wallet рдореЗрдВ рдХрдо рдкреЙрдЗрдВрдЯреНрд╕ рд╣реИрдВред 1280 рдкреЙрдЗрдВрдЯреНрд╕ рд╣реЛрдиреЗ рдкрд░ рд╣реА URL submit рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")
        elif url_submitted:
            bot.send_message(user_id, "тЪая╕П рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╣реА URL submit рдХрд┐рдпрд╛ рд╣реИред")
        else:
            msg = bot.send_message(user_id, "ЁЯУМ рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ YouTube URL рднреЗрдЬреЗрдВ (1280 Coin deduct рд╣реЛрдВрдЧреЗ):")
            bot.register_next_step_handler(msg, process_url)

    elif text == "ЁЯСС Admin":
        if user_id == ADMIN_ID:
            bot.reply_to(message, "тЬЕ рдЖрдк Admin рд╣реИрдВ!")
        else:
            bot.reply_to(message, "тЫФ рдпрд╣ рдлреАрдЪрд░ рд╕рд┐рд░реНрдлрд╝ Admin рдХреЗ рд▓рд┐рдП рд╣реИред")

# ===== Process URL =====
def process_url(message):
    user_id = message.from_user.id
    url = message.text.strip()

    if "youtube.com" in url or "youtu.be" in url:
        cur.execute("SELECT points FROM users WHERE user_id=?", (user_id,))
        points = cur.fetchone()[0]
        if points < 1280:
            bot.reply_to(message, "тЪая╕П рдЖрдкрдХреЗ Wallet рдореЗрдВ рдЕрдм 1280 рдкреЙрдЗрдВрдЯреНрд╕ рдирд╣реАрдВ рд╣реИрдВред URL submit failedред")
            return
        new_points = points - 1280
        cur.execute("UPDATE users SET points=?, url_submitted=1 WHERE user_id=?", (new_points, user_id))
        conn.commit()
        bot.send_message(ADMIN_ID, f"ЁЯОп User {user_id} рдиреЗ URL submit рдХрд┐рдпрд╛:\n{url}\nЁЯТ╡ 1280 Coin deduct рд╣реЛ рдЧрдПред")
        bot.reply_to(message, f"тЬЕ рдЖрдкрдХрд╛ URL submit рд╣реЛ рдЧрдпрд╛ рдФрд░ 1280 Coin Wallet рд╕реЗ deduct рд╣реЛ рдЧрдПред\nЁЯТ╡ рдЕрдм рдЖрдкрдХреЗ рдкрд╛рд╕ {new_points} Coin рд╣реИрдВред")
    else:
        bot.reply_to(message, "тЪая╕П рд╕рд╣реА YouTube URL рднреЗрдЬреЗрдВред рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред")

# ===== Run Bot =====
bot.infinity_polling(timeout=10, long_polling_timeout=5)