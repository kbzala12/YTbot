import telebot
from telebot import types
import sqlite3
import datetime
from config import BOT_TOKEN, ADMIN_ID, WEB_URL, VIP_YT_CHANNEL

bot = telebot.TeleBot(BOT_TOKEN)

# ЁЯОе Config
DAILY_POINT_LIMIT = 100
VIDEO_POINTS = 30
REFERRAL_POINTS = 100   # рд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ 100 рдХреЙрдЗрди
LINK_SUBMIT_COST = 1280 # URL Submit Cost
SUBSCRIBE_POINTS = 10   # Subscribe рдХрд░рдиреЗ рдкрд░ рдорд┐рд▓рдиреЗ рд╡рд╛рд▓реЗ рдкреЙрдЗрдВрдЯреНрд╕
BOT_USERNAME = "Bingyt_bot"

# ЁЯУВ Database Setup
def init_db():
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        points INTEGER DEFAULT 0,
        video_count INTEGER DEFAULT 0,
        daily_points INTEGER DEFAULT 0,
        last_active TEXT,
        ref_id INTEGER
    )''')
    conn.commit()
    conn.close()

init_db()

# ЁЯУМ User check & create
def check_user(user_id, ref_id=None):
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()

    today = datetime.date.today().isoformat()

    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()

    if not user:
        cur.execute("INSERT INTO users (user_id, points, video_count, daily_points, last_active, ref_id) VALUES (?, ?, ?, ?, ?, ?)",
                    (user_id, 0, 0, 0, today, ref_id))
        conn.commit()

        # Referral system
        if ref_id and ref_id != user_id:
            cur.execute("UPDATE users SET points = points + ?, daily_points = daily_points + ? WHERE user_id=?",
                        (REFERRAL_POINTS, REFERRAL_POINTS, ref_id))
            conn.commit()
            bot.send_message(ref_id, f"ЁЯОЙ рдЖрдкрдХреЗ referral рд╕реЗ рдирдпрд╛ рдпреВрдЬрд╝рд░ рдЬреБрдбрд╝рд╛! рдЖрдкрдХреЛ {REFERRAL_POINTS} рдХреЙрдЗрди рдорд┐рд▓реЗред")

    else:
        # рдЕрдЧрд░ рдирдпрд╛ рджрд┐рди рд╣реИ рддреЛ reset рдХрд░реЛ
        last_active = user[4]
        if last_active != today:
            cur.execute("UPDATE users SET daily_points=?, last_active=? WHERE user_id=?", (0, today, user_id))
            conn.commit()

    conn.close()


# ЁЯОм /start Command
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
    
    check_user(user_id, ref_id)

    welcome_text = f"""
ЁЯОм Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯОм

рдирдорд╕реНрддреЗ {message.from_user.first_name}!

ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЛ, рдХреЙрдЗрди рдХрдорд╛рдУ рдФрд░  
ЁЯТ░ рдЕрдкрдирд╛ YouTube рдЪреИрдирд▓ рдореЛрдиреЗрдЯрд╛рдЗрдЬреЗрд╢рди рдХрд░рд╡рд╛рдУ тЬЕ  

ЁЯУМ рдХрдорд╛рдИ рдирд┐рдпрдо:
тАв рдкреНрд░рддреНрдпреЗрдХ рд╡реАрдбрд┐рдпреЛ = {VIDEO_POINTS} рдХреЙрдЗрди  
тАв Subscribe = {SUBSCRIBE_POINTS} рдХреЙрдЗрди  
тАв рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ = {DAILY_POINT_LIMIT} рдХреЙрдЗрди  
тАв URL Submit рдХрд░рдиреЗ рдХреА рд▓рд╛рдЧрдд = {LINK_SUBMIT_COST} рдХреЙрдЗрди  

ЁЯСе рд░реЗрдлрд░рд▓ рд╕рд┐рд╕реНрдЯрдо:  
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ  
тАв рд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ {REFERRAL_POINTS} рдХреЙрдЗрди  

тЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдмреЙрдЯ рдпреВрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░рдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред  

рдЖрдкрдХрд╛ ID: {user_id}
"""

    markup = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("ЁЯЪА Open WebApp", web_app=types.WebAppInfo(WEB_URL))
    invite_btn = types.InlineKeyboardButton("ЁЯФЧ Invite Friends", url=f"https://t.me/{BOT_USERNAME}?start={user_id}")
    markup.add(web_btn, invite_btn)

    bot.send_message(user_id, welcome_text, reply_markup=markup)

    # тЬЕ Main Menu with Subscribe button
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("ЁЯУК рдкреНрд░реЛрдлрд╛рдЗрд▓", "ЁЯОБ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдУ")
    menu.row("ЁЯТ░ Wallet", "ЁЯФЧ Invite Friends")
    menu.row("ЁЯУв Subscribe", "ЁЯУд URL Submit")
    bot.send_message(user_id, "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ рдЖрдЧреЗ рдмрдврд╝реЗрдВ:", reply_markup=menu)


# ЁЯФШ Menu Handler
@bot.message_handler(func=lambda msg: True)
def handle_all(message):
    user_id = message.from_user.id
    check_user(user_id)
    text = message.text

    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()

    if text == "ЁЯУК рдкреНрд░реЛрдлрд╛рдЗрд▓":
        cur.execute("SELECT points, daily_points FROM users WHERE user_id=?", (user_id,))
        points, dpoints = cur.fetchone()
        ref_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        bot.reply_to(message, f"ЁЯСд рдЖрдкрдХреЗ рдкреЙрдЗрдВрдЯреНрд╕: {points}\nЁЯУЕ рдЖрдЬ рдЖрдкрдиреЗ {dpoints}/{DAILY_POINT_LIMIT} рдХрдорд╛рдПред\n\nЁЯФЧ Referral Link:\n{ref_link}")

    elif text == "ЁЯОБ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдУ":
        cur.execute("SELECT points, daily_points, last_active FROM users WHERE user_id=?", (user_id,))
        points, dpoints, last_active = cur.fetchone()

        today = datetime.date.today().isoformat()
        if last_active != today:
            dpoints = 0
            cur.execute("UPDATE users SET daily_points=?, last_active=? WHERE user_id=?", (0, today, user_id))
            conn.commit()

        if dpoints + VIDEO_POINTS <= DAILY_POINT_LIMIT:
            new_points = points + VIDEO_POINTS
            new_dpoints = dpoints + VIDEO_POINTS
            cur.execute("UPDATE users SET points=?, daily_points=?, last_active=? WHERE user_id=?", 
                        (new_points, new_dpoints, today, user_id))
            conn.commit()
            bot.reply_to(message, f"тЬЕ рдЖрдкрдХреЛ {VIDEO_POINTS} рдХреЙрдЗрди рдорд┐рд▓реЗ! (рдЖрдЬ {new_dpoints}/{DAILY_POINT_LIMIT})")
        else:
            bot.reply_to(message, "тЪая╕П рдЖрдЬ рдХреА рдХреЙрдЗрди рд▓рд┐рдорд┐рдЯ рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИред рдХрд▓ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!")

    elif text == "ЁЯТ░ Wallet":
        cur.execute("SELECT points FROM users WHERE user_id=?", (user_id,))
        points = cur.fetchone()[0]
        bot.reply_to(message, f"ЁЯТ╡ рдЖрдкрдХреЗ Wallet рдореЗрдВ рдХреЙрдЗрди: {points}")

    elif text == "ЁЯФЧ Invite Friends":
        ref_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        bot.reply_to(message, f"ЁЯСе рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ!\n\nЁЯФЧ рдЖрдкрдХрд╛ Referral Link:\n{ref_link}\n\nрд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ рдЖрдкрдХреЛ {REFERRAL_POINTS} рдХреЙрдЗрди рдорд┐рд▓реЗрдВрдЧреЗ тЬЕ")

    elif text == "ЁЯУд URL Submit":
        cur.execute("SELECT points FROM users WHERE user_id=?", (user_id,))
        points = cur.fetchone()[0]

        if points >= LINK_SUBMIT_COST:
            bot.reply_to(message, "ЁЯУМ рдХреГрдкрдпрд╛ рд╡рд╣ YouTube URL рднреЗрдЬреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рд╕рдмрдорд┐рдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред")
            bot.register_next_step_handler(message, process_url_submit)
        else:
            bot.reply_to(message, f"тЪая╕П рдЖрдкрдХреЗ рдкрд╛рд╕ рдкрд░реНрдпрд╛рдкреНрдд рдХреЙрдЗрди рдирд╣реАрдВ рд╣реИрдВ!\nрдЖрдкрдХреЛ {LINK_SUBMIT_COST} рдХреЙрдЗрди рдЪрд╛рд╣рд┐рдПред")

    elif text == "ЁЯУв Subscribe":
        markup = types.InlineKeyboardMarkup()
        sub_btn = types.InlineKeyboardButton("ЁЯУ║ рдЪреИрдирд▓ Subscribe рдХрд░реЗрдВ", url=VIP_YT_CHANNEL)
        done_btn = types.InlineKeyboardButton("тЬЕ Subscribed", callback_data="sub_done")
        markup.add(sub_btn)
        markup.add(done_btn)
        bot.send_message(user_id, "ЁЯСЙ рд╣рдорд╛рд░реЗ VIP YouTube рдЪреИрдирд▓ рдХреЛ Subscribe рдХрд░реЗрдВ рдФрд░ 10 рдХреЙрдЗрди рдкрд╛рдПрдВ:", reply_markup=markup)

    elif text == "ЁЯСС Admin":
        if user_id == ADMIN_ID:
            bot.reply_to(message, "тЬЕ рдЖрдк Admin рд╣реИрдВ!")
        else:
            bot.reply_to(message, "тЫФ рдпрд╣ рдлреАрдЪрд░ рд╕рд┐рд░реНрдлрд╝ Admin рдХреЗ рд▓рд┐рдП рд╣реИред")

    conn.close()


# ЁЯОп Process URL Submit
def process_url_submit(message):
    user_id = message.from_user.id
    url = message.text

    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()

    cur.execute("SELECT points FROM users WHERE user_id=?", (user_id,))
    points = cur.fetchone()[0]

    if points >= LINK_SUBMIT_COST:
        new_points = points - LINK_SUBMIT_COST
        cur.execute("UPDATE users SET points=? WHERE user_id=?", (new_points, user_id))
        conn.commit()

        bot.send_message(user_id, f"тЬЕ рдЖрдкрдХрд╛ URL рд╕рдмрдорд┐рдЯ рд╣реЛ рдЧрдпрд╛!\nрдЖрдкрдХреЗ {LINK_SUBMIT_COST} рдХреЙрдЗрди рдХрдЯреЗред")
        # Admin рдХреЛ рднреЗрдЬреЛ
        bot.send_message(ADMIN_ID, f"ЁЯУй New URL Submission:\nЁЯСд User ID: {user_id}\nЁЯФЧ URL: {url}")
    else:
        bot.send_message(user_id, "тЪая╕П рдЖрдкрдХреЗ рдкрд╛рд╕ рдкрд░реНрдпрд╛рдкреНрдд рдХреЙрдЗрди рдирд╣реАрдВ рд╣реИрдВред")

    conn.close()


# ЁЯОп Callback Handler (Subscribe Done)
@bot.callback_query_handler(func=lambda call: call.data == "sub_done")
def sub_done(call):
    user_id = call.from_user.id
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()

    cur.execute("SELECT points, daily_points, last_active FROM users WHERE user_id=?", (user_id,))
    points, dpoints, last_active = cur.fetchone()

    today = datetime.date.today().isoformat()
    if last_active != today:
        dpoints = 0
        cur.execute("UPDATE users SET daily_points=?, last_active=? WHERE user_id=?", (0, today, user_id))
        conn.commit()

    if dpoints + SUBSCRIBE_POINTS <= DAILY_POINT_LIMIT:
        new_points = points + SUBSCRIBE_POINTS
        new_dpoints = dpoints + SUBSCRIBE_POINTS
        cur.execute("UPDATE users SET points=?, daily_points=?, last_active=? WHERE user_id=?", 
                    (new_points, new_dpoints, today, user_id))
        conn.commit()
        bot.answer_callback_query(call.id, f"тЬЕ рдЖрдкрдХреЛ {SUBSCRIBE_POINTS} рдХреЙрдЗрди рдорд┐рд▓реЗ!")
        bot.send_message(user_id, f"ЁЯОЙ Thank you! рдЖрдкрдХреЗ Wallet рдореЗрдВ {SUBSCRIBE_POINTS} рдХреЙрдЗрди рдЬреБрдбрд╝ рдЧрдП тЬЕ")
    else:
        bot.answer_callback_query(call.id, "тЪая╕П рдЖрдЬ рдХреА Daily Limit рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИред")

    conn.close()


# тЩ╛ Bot Run
bot.infinity_polling()