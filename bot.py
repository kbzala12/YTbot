import telebot
from telebot import types
import sqlite3
from config import BOT_TOKEN, ADMIN_ID, WEB_URL

bot = telebot.TeleBot(BOT_TOKEN)

# ЁЯОе Config
DAILY_POINT_LIMIT = 100
VIDEO_POINTS = 30
REFERRAL_POINTS = 100
BOT_USERNAME = "Bingyt_bot"   # тЬЕ рдЕрдм invite рд▓рд┐рдВрдХ рдХреЗ рд▓рд┐рдП рдирдпрд╛ bot username

# ЁЯУВ Database Setup
def init_db():
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        points INTEGER DEFAULT 0,
        video_count INTEGER DEFAULT 0,
        daily_points INTEGER DEFAULT 0,
        ref_id INTEGER
    )''')
    conn.commit()
    conn.close()

init_db()

# ЁЯУМ User check & create
def check_user(user_id, ref_id=None):
    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()

    cur.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cur.fetchone()

    if not user:
        initial_points = REFERRAL_POINTS if ref_id else 0
        cur.execute("INSERT INTO users (user_id, points, video_count, daily_points, ref_id) VALUES (?, ?, ?, ?, ?)",
                    (user_id, initial_points, 0, initial_points, ref_id))
        conn.commit()

        # Referrer рдХреЛ points рджреЗрдирд╛
        if ref_id:
            cur.execute("UPDATE users SET points = points + ?, daily_points = daily_points + ? WHERE user_id=?",
                        (REFERRAL_POINTS, REFERRAL_POINTS, ref_id))
            conn.commit()
            bot.send_message(ref_id, f"ЁЯОЙ рдЖрдкрдХреЗ referral рд╕реЗ рдирдП user рдиреЗ join рдХрд┐рдпрд╛! рдЖрдкрдХреЛ {REFERRAL_POINTS} рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓реЗред")

    conn.close()

# ЁЯОм /start Command
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    args = message.text.split()
    ref_id = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
    
    check_user(user_id, ref_id)

    welcome_text = f"""
ЁЯОм Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯОм

рдирдорд╕реНрддреЗ {message.from_user.first_name}!

ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЛ, рдХреЙрдЗрди рдХрдорд╛рдУ рдФрд░  
ЁЯТ░ рдЕрдкрдирд╛ YouTube рдЪреИрдирд▓ рдореЛрдиреЗрдЯрд╛рдЗрдЬреЗрд╢рди рдХрд░рд╡рд╛рдУ тЬЕ  

ЁЯУМ рдХрдорд╛рдИ рдирд┐рдпрдо:
тАв рдкреНрд░рддреНрдпреЗрдХ рд╡реАрдбрд┐рдпреЛ = {VIDEO_POINTS} рдкреЙрдЗрдВрдЯреНрд╕  
тАв рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ = {DAILY_POINT_LIMIT} рдкреЙрдЗрдВрдЯреНрд╕  

ЁЯСе рд░реЗрдлрд░рд▓ рд╕рд┐рд╕реНрдЯрдо:  
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ  
тАв рд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ {REFERRAL_POINTS} рдкреЙрдЗрдВрдЯреНрд╕  

тЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдмреЙрдЯ рдпреВрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░рдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред  

рдЖрдкрдХрд╛ ID: {user_id}
"""

    markup = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("ЁЯЪА Open WebApp", web_app=types.WebAppInfo(WEB_URL))
    # тЬЕ Invite Link рдЕрдм Bingyt_bot рдХреЗ рд╕рд╛рде
    invite_link = f"https://t.me/Bingyt_bot?start={user_id}"
    invite_btn = types.InlineKeyboardButton("ЁЯФЧ Invite Friends", url=invite_link)
    markup.add(web_btn, invite_btn)

    bot.send_message(user_id, welcome_text, reply_markup=markup)

    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("ЁЯУК рдкреНрд░реЛрдлрд╛рдЗрд▓", "ЁЯОБ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдУ")
    menu.row("ЁЯТ░ Wallet")
    bot.send_message(user_id, "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ рдЖрдЧреЗ рдмрдврд╝реЗрдВ:", reply_markup=menu)

# ЁЯФШ Menu Handler
@bot.message_handler(func=lambda msg: True)
def handle_all(message):
    user_id = message.from_user.id
    check_user(user_id)
    text = message.text

    conn = sqlite3.connect("bot_data.db")
    cur = conn.cursor()

    if text == "ЁЯУК рдкреНрд░реЛрдлрд╛рдЗрд▓":
        cur.execute("SELECT points, daily_points FROM users WHERE user_id=?", (user_id,))
        points, dpoints = cur.fetchone()
        ref_link = f"https://t.me/Bingyt_bot?start={user_id}"  # тЬЕ Updated referral link
        bot.reply_to(message, f"ЁЯСд рдЖрдкрдХреЗ рдкреЙрдЗрдВрдЯреНрд╕: {points}\nЁЯУЕ рдЖрдЬ рдЖрдкрдиреЗ {dpoints}/{DAILY_POINT_LIMIT} рдкреЙрдЗрдВрдЯреНрд╕ рдХрдорд╛рдПред\n\nЁЯФЧ рдЖрдкрдХрд╛ Referral Link:\n{ref_link}")

    elif text == "ЁЯОБ рдкреЙрдЗрдВрдЯреНрд╕ рдкрд╛рдУ":
        cur.execute("SELECT points, daily_points FROM users WHERE user_id=?", (user_id,))
        points, dpoints = cur.fetchone()

        if dpoints + VIDEO_POINTS <= DAILY_POINT_LIMIT:
            new_points = points + VIDEO_POINTS
            new_dpoints = dpoints + VIDEO_POINTS
            cur.execute("UPDATE users SET points=?, daily_points=? WHERE user_id=?", 
                        (new_points, new_dpoints, user_id))
            conn.commit()
            bot.reply_to(message, f"тЬЕ рдЖрдкрдХреЛ {VIDEO_POINTS} рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓реЗ! (рдЖрдЬ {new_dpoints}/{DAILY_POINT_LIMIT})")
        else:
            bot.reply_to(message, "тЪая╕П рдЖрдЬ рдХреА рдкреЙрдЗрдВрдЯреНрд╕ рд▓рд┐рдорд┐рдЯ рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИред рдХрд▓ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!")

    elif text == "ЁЯТ░ Wallet":
        cur.execute("SELECT points FROM users WHERE user_id=?", (user_id,))
        points = cur.fetchone()[0]
        bot.reply_to(message, f"ЁЯТ╡ рдЖрдкрдХреЗ Wallet рдореЗрдВ рдкреЙрдЗрдВрдЯреНрд╕: {points}")

    elif text == "ЁЯСС Admin":
        if user_id == ADMIN_ID:
            bot.reply_to(message, "тЬЕ рдЖрдк Admin рд╣реИрдВ!")
        else:
            bot.reply_to(message, "тЫФ рдпрд╣ рдлреАрдЪрд░ рд╕рд┐рд░реНрдлрд╝ Admin рдХреЗ рд▓рд┐рдП рд╣реИред")

    conn.close()

# тЩ╛ Bot Run
bot.infinity_polling()