import os
import sqlite3
import telebot
from telebot import types
from datetime import datetime

# ---------------- Bot Credentials ----------------
BOT_TOKEN = os.environ.get("BOT_TOKEN", "7978191312:AAFFaOkxBSI9YoN4uR3I5FtZbfQNojT8F4U")
ADMIN_ID = int(os.environ.get("ADMIN_ID", 7459795138))
BOT_USERNAME = os.environ.get("BOT_USERNAME", "Bingyt_bot")

# ---------------- Config ----------------
LINK_SUBMIT_COST = 1280
REFERRAL_POINTS = 100
DAILY_BONUS = 10

bot = telebot.TeleBot(BOT_TOKEN)

# ---------------- Database ----------------
conn = sqlite3.connect("bot.db", check_same_thread=False)
cur = conn.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS users(
    id INTEGER PRIMARY KEY,
    name TEXT,
    username TEXT,
    coins INTEGER DEFAULT 0,
    invites INTEGER DEFAULT 0,
    last_bonus TEXT
)""")

cur.execute("""CREATE TABLE IF NOT EXISTS urls(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    url TEXT,
    status TEXT DEFAULT 'pending'
)""")
conn.commit()

# ---------------- Helper ----------------
def user_exists(user_id):
    cur.execute("SELECT id FROM users WHERE id=?", (user_id,))
    return cur.fetchone()

def create_user(user):
    if not user_exists(user.id):
        cur.execute("INSERT INTO users (id,name,username,coins,invites) VALUES (?,?,?,?,?)",
                    (user.id, user.first_name, user.username, 0, 0))
        conn.commit()

def get_coins(user_id):
    cur.execute("SELECT coins FROM users WHERE id=?", (user_id,))
    data = cur.fetchone()
    return data[0] if data else 0

def add_coins(user_id, amount):
    cur.execute("UPDATE users SET coins=coins+? WHERE id=?", (amount, user_id))
    conn.commit()

# ---------------- Start ----------------
@bot.message_handler(commands=['start'])
def start(message):
    create_user(message.from_user)
    text = """ЁЯОм *Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯОм

рдирдорд╕реНрддреЗ *{name}* ЁЯСЛ

ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЛ, рдХреЙрдЗрди рдХрдорд╛рдУ рдФрд░  
ЁЯТ░ рдЕрдкрдирд╛ YouTube рдЪреИрдирд▓ рдореЛрдиреЗрдЯрд╛рдЗрдЬреЗрд╢рди рдХрд░рд╡рд╛рдУ тЬЕ  

ЁЯУМ *рдХрдорд╛рдИ рдирд┐рдпрдо:*
тАв рдкреНрд░рддреНрдпреЗрдХ рд╡реАрдбрд┐рдпреЛ = 30 рдкреЙрдЗрдВрдЯреНрд╕  
тАв рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ = 100 рдкреЙрдЗрдВрдЯреНрд╕  

ЁЯСе *рд░реЗрдлрд░рд▓ рд╕рд┐рд╕реНрдЯрдо:*  
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ  
тАв рд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ 100 рдкреЙрдЗрдВрдЯреНрд╕  

тЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдмреЙрдЯ рдпреВрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░рдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред
""".format(name=message.from_user.first_name)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ЁЯПж Wallet", "ЁЯФЧ Submit URL")
    markup.add("ЁЯОБ Daily Bonus", "ЁЯСе Invite Friends")

    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=markup)

# ---------------- Wallet ----------------
@bot.message_handler(func=lambda m: m.text == "ЁЯПж Wallet")
def wallet(message):
    cur.execute("SELECT coins,invites FROM users WHERE id=?", (message.from_user.id,))
    data = cur.fetchone()
    coins, invites = data
    text = f"""ЁЯСд *Profile Info*

ЁЯЖФ ID: `{message.from_user.id}`
ЁЯУЫ Name: {message.from_user.first_name}
ЁЯТ░ Coins: {coins}
ЁЯСе Invites: {invites}
"""
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# ---------------- Daily Bonus ----------------
@bot.message_handler(func=lambda m: m.text == "ЁЯОБ Daily Bonus")
def daily_bonus(message):
    user_id = message.from_user.id
    cur.execute("SELECT last_bonus FROM users WHERE id=?", (user_id,))
    last = cur.fetchone()[0]
    today = datetime.now().strftime("%Y-%m-%d")

    if last == today:
        bot.send_message(message.chat.id, "тЪая╕П рдЖрдкрдиреЗ рдЖрдЬ рдХрд╛ рдмреЛрдирд╕ рдкрд╣рд▓реЗ рд╣реА рд▓реЗ рд▓рд┐рдпрд╛ рд╣реИред")
    else:
        add_coins(user_id, DAILY_BONUS)
        cur.execute("UPDATE users SET last_bonus=? WHERE id=?", (today, user_id))
        conn.commit()
        bot.send_message(message.chat.id, f"тЬЕ рдЖрдкрдХреЛ {DAILY_BONUS} рдХреЙрдЗрди рдХрд╛ рджреИрдирд┐рдХ рдмреЛрдирд╕ рдорд┐рд▓рд╛!")

# ---------------- Invite Friends ----------------
@bot.message_handler(func=lambda m: m.text == "ЁЯСе Invite Friends")
def invite(message):
    bot.send_message(message.chat.id,
                     f"ЁЯФЧ рдЕрдкрдирд╛ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ:\nhttps://t.me/{BOT_USERNAME}?start={message.from_user.id}")

# ---------------- Handle Referral ----------------
@bot.message_handler(commands=['start'], regexp="start ")
def referral(message):
    ref_id = int(message.text.split()[1])
    if ref_id != message.from_user.id and user_exists(ref_id):
        create_user(message.from_user)
        add_coins(ref_id, REFERRAL_POINTS)
        cur.execute("UPDATE users SET invites=invites+1 WHERE id=?", (ref_id,))
        conn.commit()
        bot.send_message(ref_id, f"ЁЯОЙ рдирдпрд╛ рдпреВрдЬрд╝рд░ рдЬреБрдбрд╝рд╛! рдЖрдкрдХреЛ {REFERRAL_POINTS} рдХреЙрдЗрди рдорд┐рд▓реЗ тЬЕ")

# ---------------- Submit URL ----------------
@bot.message_handler(func=lambda m: m.text == "ЁЯФЧ Submit URL")
def submit_url(message):
    coins = get_coins(message.from_user.id)
    if coins < LINK_SUBMIT_COST:
        bot.send_message(message.chat.id, f"тЪая╕П рдЖрдкрдХреЛ рд▓рд┐рдВрдХ рд╕рдмрдорд┐рдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП {LINK_SUBMIT_COST} рдХреЙрдЗрди рдЪрд╛рд╣рд┐рдПред")
    else:
        msg = bot.send_message(message.chat.id, "ЁЯУй рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ YouTube рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВ:")
        bot.register_next_step_handler(msg, save_url)

def save_url(message):
    url = message.text
    user_id = message.from_user.id
    cur.execute("INSERT INTO urls (user_id,url) VALUES (?,?)", (user_id, url))
    cur.execute("UPDATE users SET coins=coins-? WHERE id=?", (LINK_SUBMIT_COST, user_id))
    conn.commit()
    bot.send_message(message.chat.id, "тЬЕ рдЖрдкрдХрд╛ рд▓рд┐рдВрдХ рдПрдбрдорд┐рди рдХреЛ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ред")
    bot.send_message(ADMIN_ID, f"ЁЯУе рдирдпрд╛ URL рд╕рдмрдорд┐рд╢рди:\n\n{url}\n\nЁЯСд User: {message.from_user.first_name} ({user_id})")

# ---------------- Admin Panel ----------------
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "тЭМ рдЖрдк рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИрдВред")

    cur.execute("SELECT COUNT(*) FROM users")
    total_users = cur.fetchone()[0]

    cur.execute("SELECT SUM(coins) FROM users")
    total_coins = cur.fetchone()[0] or 0

    cur.execute("SELECT COUNT(*) FROM urls WHERE status='pending'")
    pending = cur.fetchone()[0]

    text = f"""ЁЯУК *Admin Panel*

ЁЯСе Total Users: {total_users}
ЁЯТ░ Total Coins: {total_coins}
ЁЯУй Pending URLs: {pending}
"""

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("тЬЕ Approve URL", "тЭМ Reject URL")
    bot.send_message(message.chat.id, text, parse_mode="Markdown", reply_markup=markup)


print("ЁЯдЦ Bot is running...")
bot.infinity_polling()