K B zala:
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes
import sqlite3
from datetime import datetime

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = 7978191312:AAFyWVkBruuR42HTuTd_sQxFaKHBrre0VWw
ADMIN_ID =7459795138
WEB_APP_URL = "https://0e8b2f63-6f1c-4921-9feb-42115ce5360f-00-2amqt62lj9glu.picard.replit.dev"
GROUP_ID = @boomupbot10"  # Update with your group username

def generate_referral_code():
    import random
    import string
    return f"REF{random.randint(1000, 9999)}{random.choice(string.ascii_uppercase)}{random.choice(string.ascii_uppercase)}"

def get_or_create_user(telegram_id, username=None, first_name=None, last_name=None, referral_code=None):
    conn = sqlite3.connect('db.sqlite')
    cursor = conn.cursor()
    
    # Check if user exists
    cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (str(telegram_id),))
    user = cursor.fetchone()
    
    if not user:
        # Create new user
        ref_code = generate_referral_code()
        cursor.execute('''
            INSERT INTO users (telegram_id, username, first_name, last_name, referral_code, referred_by)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (str(telegram_id), username, first_name, last_name, ref_code, referral_code))
        
        user_id = cursor.lastrowid
        
        # Handle referral bonus
        if referral_code:
            cursor.execute('SELECT id FROM users WHERE referral_code = ?', (referral_code,))
            referrer = cursor.fetchone()
            
            if referrer:
                referrer_id = referrer[0]
                
                # Add bonus to referrer
                cursor.execute('''
                    UPDATE users 
                    SET coin_balance = coin_balance + 100, total_coins_earned = total_coins_earned + 100
                    WHERE id = ?
                ''', (referrer_id,))
                
                # Create referral record
                cursor.execute('''
                    INSERT INTO referrals (referrer_id, referred_user_id)
                    VALUES (?, ?)
                ''', (referrer_id, user_id))
        
        conn.commit()
        
        # Get the created user
        cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
        user = cursor.fetchone()
    
    conn.close()
    return user

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start command handler"""
    user = update.effective_user
    
    # Extract referral code from command
    referral_code = None
    if context.args:
        referral_code = context.args[0]
    
    # Get or create user
    db_user = get_or_create_user(
        user.id, 
        user.username, 
        user.first_name, 
        user.last_name, 
        referral_code
    )
    
    welcome_message = f"""
ЁЯОм *Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯОм

рдирдорд╕реНрддреЗ {user.first_name}! 

ЁЯУ╣ *рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЗрдВ рдФрд░ рдХреЙрдЗрди рдХрдорд╛рдПрдВ:*
тАв рдкреНрд░рддреНрдпреЗрдХ рд╡реАрдбрд┐рдпреЛ рдХреЗ рд▓рд┐рдП 30 рдХреЙрдЗрдиреНрд╕
тАв рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ: 900 рдХреЙрдЗрдиреНрд╕
тАв 100+ рднрд╛рд░рддреАрдп YouTube рд╡реАрдбрд┐рдпреЛ

ЁЯСе *рд░реЗрдлрд░рд▓ рд╕рд┐рд╕реНрдЯрдо:*
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ
тАв рдкреНрд░рддреНрдпреЗрдХ рдирдП рдпреВрдЬрд░ рдХреЗ рд▓рд┐рдП 100 рдХреЙрдЗрдиреНрд╕

ЁЯФЧ *URL рдЬрдорд╛ рдХрд░реЗрдВ:*
тАв рдЕрдкрдирд╛ YouTube рд╡реАрдбрд┐рдпреЛ рдЬрдорд╛ рдХрд░реЗрдВ
тАв 200 рдХреЙрдЗрдиреНрд╕ рдкрд╛рдПрдВ

тЪая╕П *рдорд╣рддреНрд╡рдкреВрд░реНрдг:* рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рд╣рдорд╛рд░реЗ рдЧреНрд░реБрдк рдореЗрдВ рдЬреЙрдЗрди рдХрд░рдирд╛ рдЖрд╡рд╢реНрдпрдХ рд╣реИред

рдЖрдкрдХрд╛ рд░реЗрдлрд░рд▓ рдХреЛрдб: {db_user[9] if db_user else 'ERROR'}
"""
    
    keyboard = [
        [
            InlineKeyboardButton("ЁЯЪА рдРрдк рд▓реЙрдиреНрдЪ рдХрд░реЗрдВ", web_app=WebAppInfo(url=WEB_APP_URL)),
            InlineKeyboardButton("ЁЯСе рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░реЗрдВ", url=f"https://t.me/{GROUP_ID.replace('@', '')}")
        ],
        [
            InlineKeyboardButton(

"ЁЯУв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ", 
                switch_inline_query=f"ЁЯОм Video Coin Earner Bot рд╕реЗ рдХреЙрдЗрдиреНрд╕ рдХрдорд╛рдПрдВ! {WEB_APP_URL}?ref={db_user[9] if db_user else ''}"
            )
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_message, 
        parse_mode='Markdown', 
        reply_markup=reply_markup
    )

async def verify(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Verify group membership"""
    user = update.effective_user
    
    try:
        # Check if user is in the group
        chat_member = await context.bot.get_chat_member(GROUP_ID, user.id)
        is_member = chat_member.status in ['member', 'administrator', 'creator']
        
        if is_member:
            # Update user group membership status
            conn = sqlite3.connect('db.sqlite')
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET is_group_member = 1 WHERE telegram_id = ?', (str(user.id),))
            conn.commit()
            conn.close()
            
            keyboard = [[InlineKeyboardButton("ЁЯЪА рдРрдк рд▓реЙрдиреНрдЪ рдХрд░реЗрдВ", web_app=WebAppInfo(url=WEB_APP_URL))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                'тЬЕ рдмрдзрд╛рдИ рд╣реЛ! рдЖрдк рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╡реЗрд░рд┐рдлрд╛рдИ рд╣реЛ рдЧрдП рд╣реИрдВред рдЕрдм рдЖрдк рдХреЙрдЗрдиреНрд╕ рдХрдорд╛рдирд╛ рд╢реБрд░реВ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред',
                reply_markup=reply_markup
            )
        else:
            keyboard = [[InlineKeyboardButton("ЁЯСе рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░реЗрдВ", url=f"https://t.me/{GROUP_ID.replace('@', '')}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                'тЭМ рдЖрдк рдЕрднреА рднреА рдЧреНрд░реБрдк рдХреЗ рд╕рджрд╕реНрдп рдирд╣реАрдВ рд╣реИрдВред рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░реЗрдВред',
                reply_markup=reply_markup
            )
    except Exception as e:
        await update.message.reply_text('рд╡реЗрд░рд┐рдлрд┐рдХреЗрд╢рди рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред')

async def wallet(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Wallet command handler"""
    user = update.effective_user
    
    conn = sqlite3.connect('db.sqlite')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (str(user.id),))
    db_user = cursor.fetchone()
    
    if not db_user:
        await update.message.reply_text('рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ /start рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред')
        return
    
    # Get referral count
    cursor.execute('SELECT COUNT(*) FROM referrals WHERE referrer_id = ?', (db_user[0],))
    referral_count = cursor.fetchone()[0]
    
    conn.close()
    
    wallet_message = f"""
ЁЯТ░ *рдЖрдкрдХрд╛ рд╡реЙрд▓реЗрдЯ*

ЁЯкЩ *рдЙрдкрд▓рдмреНрдз рдХреЙрдЗрдиреНрд╕:* {db_user[5]}
ЁЯУК *рдХреБрд▓ рдХрдорд╛рдП рдЧрдП:* {db_user[7]}
ЁЯУ╣ *рджреЗрдЦреЗ рдЧрдП рд╡реАрдбрд┐рдпреЛ:* {db_user[8]}
ЁЯСе *рд╕рдлрд▓ рд░реЗрдлрд░рд▓реНрд╕:* {referral_count}
ЁЯУЕ *рдЖрдЬ рдХрдорд╛рдП рдЧрдП:* {db_user[6]}/900

ЁЯФД *рдЖрдЬ рдХрд╛ рд╕реНрдЯреЗрдЯрд╕:* {'тЬЕ рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ рдкреВрд░реА' if db_user[6] >= 900 else 'ЁЯЯб рдХрдорд╛рдирд╛ рдЬрд╛рд░реА рд░рдЦреЗрдВ'}
"""
    
    keyboard = [[InlineKeyboardButton("ЁЯЪА рдРрдк рд▓реЙрдиреНрдЪ рдХрд░реЗрдВ", web_app=WebAppInfo(url=WEB_APP_URL))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        wallet_message, 
        parse_mode='Markdown', 
        reply_markup=reply_markup
    )

async def referral(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Referral command handler"""
    user = update.effective_user
    
    conn = sqlite3.connect('db.sqlite')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM users WHERE telegram_id = ?', (str(user.id),))
    db_user = cursor.fetchone()
    
    if not db_user:
        await update.message.reply_text('рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ /start рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред')
        return
    
    # Get referral count
    cursor.execute('SELECT COUNT(*) FROM referrals WHERE referrer_id = ?', (db_user[0],))
    referral_count = cursor.fetchone()[0]
    
    conn.close()
    
    referral_link = f"{WEB_APP_URL}?ref={db_user[9]}"
    
    referral_message = f"""
ЁЯСе *рд░реЗрдлрд░рд▓ рд╕рд┐рд╕реНрдЯрдо*

ЁЯФЧ *рдЖрдкрдХрд╛ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ:*
{referral_link}

ЁЯУК *рдЖрдкрдХреЗ рд╕реНрдЯреЗрдЯреНрд╕:*
тАв рдХреБрд▓ рд░реЗрдлрд░рд▓реНрд╕: {referral_count}
тАв рд░реЗрдлрд░рд▓ рд╕реЗ рдХрдорд╛рдпрд╛: {referral_count * 100} рдХреЙрдЗрдиреНрд╕

ЁЯТб *рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ:*
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЕрдкрдирд╛ рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВ
тАв рдЬрдм рд╡реЗ рдЬреЙрдЗрди рдХрд░рддреЗ рд╣реИрдВ, рдЖрдкрдХреЛ 100 рдХреЙрдЗрдиреНрд╕ рдорд┐рд▓рддреЗ рд╣реИрдВ
тАв рдХреЛрдИ рд▓рд┐рдорд┐рдЯ рдирд╣реАрдВ!
"""
    
    keyboard = [
        [InlineKeyboardButton(
            "ЁЯУд рд╢реЗрдпрд░ рдХрд░реЗрдВ", 
            switch_inline_query=f"ЁЯОм Video Coin Earner Bot рд╕реЗ рдХреЙрдЗрдиреНрд╕ рдХрдорд╛рдПрдВ! {referral_link}"
        )],
        [InlineKeyboardButton("ЁЯЪА рдРрдк рд▓реЙрдиреНрдЪ рдХрд░реЗрдВ", web_app=WebAppInfo(url=WEB_APP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        referral_message, 
        parse_mode='Markdown', 
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Help command handler"""
    help_message = """
ЁЯОм *Video Coin Earner Bot Commands*

/start - рдмреЙрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ
/wallet - рд╡реЙрд▓реЗрдЯ рджреЗрдЦреЗрдВ  
/referral - рд░реЗрдлрд░рд▓ рдЬрд╛рдирдХрд╛рд░реА
/verify - рдЧреНрд░реБрдк рдореЗрдВрдмрд░рд╢рд┐рдк рд╡реЗрд░рд┐рдлрд╛рдИ рдХрд░реЗрдВ
/help - рдпрд╣ рдореИрд╕реЗрдЬ

ЁЯУ▒ *рдореБрдЦреНрдп рдлреАрдЪрд░реНрд╕:*
тАв рд╡реАрдбрд┐рдпреЛ рджреЗрдЦрдХрд░ рдХреЙрдЗрдиреНрд╕ рдХрдорд╛рдПрдВ
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рд░реЗрдлрд░ рдХрд░реЗрдВ
тАв YouTube URLs рдЬрдорд╛ рдХрд░реЗрдВ
тАв рджреИрдирд┐рдХ 900 рдХреЙрдЗрдиреНрд╕ рдХреА рд▓рд┐рдорд┐рдЯ

ЁЯФФ *рд╕рдкреЛрд░реНрдЯ:* @admin_username
"""
    
    await update.message.reply_text(help_message, parse_mode='Markdown')

def main() -> None:
    """Start the bot."""
    # Initialize database
    from app import init_db
    init_db()
    
    # Create the Application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("verify", verify))
    application.add_handler(CommandHandler("wallet", wallet))
    application.add_handler(CommandHandler("referral", referral))
    application.add_handler(CommandHandler("help", help_command))
    
    # Run the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if name == 'main':
    main()