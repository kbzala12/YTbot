import telebot, sqlite3
from telebot import types
from datetime import datetime, timedelta
from config import BOT_TOKEN, ADMIN_ID, WEB_URL, COMMUNITY_LINK, REF_POINTS, DAILY_BONUS

# ========== Bot Setup ==========
bot = telebot.TeleBot(BOT_TOKEN)

# ========== Database ==========
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    name TEXT,
    points INTEGER DEFAULT 0,
    referred_by INTEGER,
    last_bonus TEXT
)
""")
conn.commit()

# ========== Keyboards ==========
def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("ЁЯОБ Wallet", "ЁЯУд Submit URL")
    kb.row("ЁЯСе Invite", "ЁЯОЙ Daily Bonus")
    kb.row("ЁЯМР Join Community")
    return kb

def admin_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("ЁЯУК Total Users", "ЁЯТ░ Total Coins")
    kb.row("тмЕя╕П Back")
    return kb

# ========== Start Command ==========
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    name = message.from_user.first_name

    # DB рдореЗрдВ рдпреВрдЬрд╝рд░ рдЪреЗрдХ рдФрд░ insert
    cursor.execute("SELECT id FROM users WHERE id=?", (user_id,))
    if not cursor.fetchone():
        ref = None
        if len(message.text.split()) > 1:
            try:
                ref = int(message.text.split()[1])
                if ref != user_id:
                    cursor.execute("UPDATE users SET points = points + ? WHERE id=?", (REF_POINTS, ref))
                    bot.send_message(ref, f"ЁЯОЙ рдирдпрд╛ рдпреВрдЬрд╝рд░ рдЬреБрдбрд╝рд╛! рдЖрдкрдХреЛ {REF_POINTS} рдХреЙрдЗрди рдорд┐рд▓реЗ тЬЕ")
            except:
                pass
        cursor.execute("INSERT INTO users (id, name, points, referred_by) VALUES (?, ?, ?, ?)",
                       (user_id, name, 0, ref))
        conn.commit()

    # Welcome Message
    welcome_text = (
        f"ЁЯОм *Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯОм\n\n"
        f"рдирдорд╕реНрддреЗ {name}! ЁЯСЛ\n\n"
        "ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЛ, рдХреЙрдЗрди рдХрдорд╛рдУ рдФрд░  \n"
        "ЁЯТ░ рдЕрдкрдирд╛ YouTube рдЪреИрдирд▓ рдореЛрдиреЗрдЯрд╛рдЗрдЬреЗрд╢рди рдХрд░рд╡рд╛рдУ тЬЕ\n\n"
        f"ЁЯУМ рдХрдорд╛рдИ рдирд┐рдпрдо:\nтАв рдкреНрд░рддреНрдпреЗрдХ рд╡реАрдбрд┐рдпреЛ = 30 рдкреЙрдЗрдВрдЯреНрд╕\nтАв рджреИрдирд┐рдХ рдмреЛрдирд╕ = {DAILY_BONUS} рдкреЙрдЗрдВрдЯреНрд╕\nтАв рд░реЗрдлрд░рд▓ = {REF_POINTS} рдкреЙрдЗрдВрдЯреНрд╕\n\n"
        "тЪая╕П рдмреЙрдЯ рдпреВрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдХрдореНрдпреБрдирд┐рдЯреА рдЬреЙрдЗрди рдХрд░реЗрдВред"
    )

    # Inline buttons: Open App + Join + Invite
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("ЁЯОм Open App", url=WEB_URL))
    markup.add(types.InlineKeyboardButton("ЁЯУв Join Community", url=COMMUNITY_LINK))
    markup.add(types.InlineKeyboardButton("ЁЯСе Invite Friend", switch_inline_query=""))

    bot.send_message(user_id, welcome_text, parse_mode="Markdown", reply_markup=markup)
    bot.send_message(user_id, "ЁЯСЗ рдиреАрдЪреЗ рдореЗрди рдореЗрдиреНрдпреВ:", reply_markup=main_keyboard())

# ========== Wallet ==========
@bot.message_handler(func=lambda m: m.text == "ЁЯОБ Wallet")
def wallet(message):
    user_id = message.chat.id
    cursor.execute("SELECT points FROM users WHERE id=?", (user_id,))
    points = cursor.fetchone()[0]
    bot.send_message(user_id, f"ЁЯСд *рдЖрдкрдХрд╛ рдкреНрд░реЛрдлрд╛рдЗрд▓*\n\nЁЯЖФ ID: {user_id}\nЁЯТ░ Wallet Balance: {points} рдХреЙрдЗрди",
                     parse_mode="Markdown")

# ========== Submit URL ==========
@bot.message_handler(func=lambda m: m.text == "ЁЯУд Submit URL")
def submit_url(message):
    bot.send_message(message.chat.id, f"ЁЯФЧ рдЕрдкрдирд╛ рд▓рд┐рдВрдХ рдпрд╣рд╛рдВ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ: \n{WEB_URL}")

# ========== Invite ==========
@bot.message_handler(func=lambda m: m.text == "ЁЯСе Invite")
def invite(message):
    user_id = message.chat.id
    bot.send_message(user_id,
                     f"ЁЯСе рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ рдФрд░ рд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ {REF_POINTS} рдкреЙрдЗрдВрдЯреНрд╕ рдХрдорд╛рдПрдБ!\n\n"
                     f"ЁЯСЙ рдЖрдкрдХрд╛ рд▓рд┐рдВрдХ:\nhttps://t.me/{bot.get_me().username}?start={user_id}")

# ========== Daily Bonus ==========
@bot.message_handler(func=lambda m: m.text == "ЁЯОЙ Daily Bonus")
def daily_bonus(message):
    user_id = message.chat.id
    cursor.execute("SELECT last_bonus FROM users WHERE id=?", (user_id,))
    last_bonus = cursor.fetchone()[0]
    now = datetime.now()
    if not last_bonus or (now - datetime.fromisoformat(last_bonus)) > timedelta(hours=24):
        cursor.execute("UPDATE users SET points = points + ?, last_bonus=? WHERE id=?",
                       (DAILY_BONUS, now.isoformat(), user_id))
        conn.commit()
        bot.send_message(user_id, f"ЁЯОЙ рдЖрдкрдХреЛ {DAILY_BONUS} рдХреЙрдЗрди рдХрд╛ рдбреЗрд▓реА рдмреЛрдирд╕ рдорд┐рд▓ рдЧрдпрд╛ тЬЕ")
    else:
        bot.send_message(user_id, "тЭМ рдЖрдкрдиреЗ рдЖрдЬ рдХрд╛ рдмреЛрдирд╕ рдкрд╣рд▓реЗ рд╣реА рд▓реЗ рд▓рд┐рдпрд╛ рд╣реИред рдХрд▓ рдлрд┐рд░ рдЖрдПрдВ!")

# ========== Join Community ==========
@bot.message_handler(func=lambda m: m.text == "ЁЯМР Join Community")
def join(message):
    bot.send_message(message.chat.id, f"ЁЯМР рд╣рдорд╛рд░реА рдХрдореНрдпреБрдирд┐рдЯреА рдЬреЙрдЗрди рдХрд░реЗрдВ:\nЁЯСЙ {COMMUNITY_LINK}")

# ========== Admin Panel ==========
@bot.message_handler(commands=['admin'])
def admin(message):
    if message.chat.id == ADMIN_ID:
        bot.send_message(ADMIN_ID, "ЁЯФР Admin Panel Opened", reply_markup=admin_keyboard())
    else:
        bot.send_message(message.chat.id, "тЭМ рдпрд╣ рдлреАрдЪрд░ рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рд╣реИред")

@bot.message_handler(func=lambda m: m.text == "ЁЯУК Total Users")
def total_users(message):
    if message.chat.id == ADMIN_ID:
        cursor.execute("SELECT COUNT(*) FROM users")
        total = cursor.fetchone()[0]
        bot.send_message(ADMIN_ID, f"ЁЯСе Total Registered Users: {total}")

@bot.message_handler(func=lambda m: m.text == "ЁЯТ░ Total Coins")
def total_coins(message):
    if message.chat.id == ADMIN_ID:
        cursor.execute("SELECT SUM(points) FROM users")
        total = cursor.fetchone()[0]
        bot.send_message(ADMIN_ID, f"ЁЯТ░ Total Distributed Coins: {total}")

@bot.message_handler(func=lambda m: m.text == "тмЕя╕П Back")
def back(message):
    if message.chat.id == ADMIN_ID:
        bot.send_message(ADMIN_ID, "тмЕя╕П Main Menu", reply_markup=main_keyboard())

# ========== Run Bot ==========
print("ЁЯдЦ Bot Started...")
bot.infinity_polling()