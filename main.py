# main.py
import os
import telebot
from telebot import types
import sqlite3
import time # рджреИрдирд┐рдХ рдмреЛрдирд╕ рдХреЗ рд▓рд┐рдП рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдк рдЯреНрд░реИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
from datetime import datetime, timedelta

# ---------- CONFIGURATION ----------
# рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдХреА config.py рдлрд╝рд╛рдЗрд▓ рд╕рд╣реА рдврдВрдЧ рд╕реЗ рд╕реЗрдЯ рд╣реИ
try:
    from config import BOT_TOKEN, WEB_URL, BOT_USERNAME, REFERRAL_POINTS, LINK_SUBMIT_COST, ADMIN_ID
except ImportError:
    print("тЭМ Error: config.py not found or incomplete. Please create config.py with required variables.")
    exit() # рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдХреЗ рдмрд┐рдирд╛ рдмреЙрдЯ рдирд╣реАрдВ рдЪрд▓реЗрдЧрд╛

# ---------- BOT INIT ----------
bot = telebot.TeleBot(BOT_TOKEN)

# ---------- KEEP ALIVE ----------
# рдпрд╣ рдЕрдХреНрд╕рд░ Replit рдЬреИрд╕реЗ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдкрд░ рдмреЙрдЯ рдХреЛ рдЪрд╛рд▓реВ рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред
# рдпрджрд┐ рдЖрдк рдЗрд╕реЗ рдХрд┐рд╕реА рдЕрдиреНрдп рд╕реНрдерд╛рдпреА рд╕рд░реНрд╡рд░ рдкрд░ рдЪрд▓рд╛ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рдЗрд╕рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ рд╣реЛ рд╕рдХрддреА рд╣реИред
try:
    from keep_alive import keep_alive
    keep_alive()
    print("тЬЕ Keep alive service started.")
except ImportError:
    print("тЪая╕П Warning: keep_alive.py not found. Bot might stop if not hosted on a persistent server.")
except Exception as e:
    print(f"тЭМ Error starting keep alive service: {e}")

# ---------- DB SETUP ----------
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()

# Users table
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    coins INTEGER DEFAULT 0,
    referrals INTEGER DEFAULT 0,
    daily_points INTEGER DEFAULT 0,
    last_daily_bonus TEXT, -- рдЕрдВрддрд┐рдо рджреИрдирд┐рдХ рдмреЛрдирд╕ рдХрд╛ рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдк
    referred_by INTEGER
)
""")

# Submissions table
cursor.execute("""
CREATE TABLE IF NOT EXISTS submissions (
    id INTEGER PRIMARY KEY AUTOINCREMENT, -- SQLite рдореЗрдВ INTEGER PRIMARY KEY рд╕реНрд╡рддрдГ рд╣реА AUTOINCREMENT рд╣реЛрддрд╛ рд╣реИ
    user_id INTEGER,
    url TEXT,
    status TEXT DEFAULT 'pending', -- 'pending', 'approved', 'rejected'
    submission_date TEXT DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()
print("тЬЕ Database setup complete.")

# ---------- HELPERS ----------
def get_user(user_id):
    """рдПрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдбреЗрдЯрд╛ рдХреЛ рдкреБрдирдГ рдкреНрд░рд╛рдкреНрдд рдХрд░рддрд╛ рд╣реИред"""
    cursor.execute("SELECT username, coins, referrals, daily_points, last_daily_bonus, referred_by FROM users WHERE id=?", (user_id,))
    return cursor.fetchone()

def add_user(user_id, username):
    """рдпрджрд┐ рдореМрдЬреВрдж рди рд╣реЛ рддреЛ рдПрдХ рдирдпрд╛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЬреЛрдбрд╝рддрд╛ рд╣реИред"""
    cursor.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()

def add_coins(user_id, amount):
    """рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рд╕рд┐рдХреНрдХреЛрдВ рдФрд░ рджреИрдирд┐рдХ рдЕрдВрдХреЛрдВ рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд░рддрд╛ рд╣реИред"""
    cursor.execute("UPDATE users SET coins = coins + ?, daily_points = daily_points + ? WHERE id=?", 
                   (amount, amount, user_id))
    conn.commit()

def add_referral(ref_id, user_id):
    """рдПрдХ рд░реЗрдлрд░рд▓ рдЬреЛрдбрд╝рддрд╛ рд╣реИ рдФрд░ рд░реЗрдлрд░рд░ рдХреЛ рд╕рд┐рдХреНрдХреЗ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред"""
    cursor.execute("UPDATE users SET referrals = referrals + 1, coins = coins + ? WHERE id=?", (REFERRAL_POINTS, ref_id))
    cursor.execute("UPDATE users SET referred_by = ? WHERE id=?", (ref_id, user_id))
    conn.commit()

def reset_daily_points(user_id):
    """рджреИрдирд┐рдХ рдЕрдВрдХреЛрдВ рдХреЛ рд░реАрд╕реЗрдЯ рдХрд░рддрд╛ рд╣реИред"""
    cursor.execute("UPDATE users SET daily_points = 0 WHERE id=?", (user_id,))
    conn.commit()

def update_last_daily_bonus_time(user_id):
    """рдЕрдВрддрд┐рдо рджреИрдирд┐рдХ рдмреЛрдирд╕ рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдк рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд░рддрд╛ рд╣реИред"""
    cursor.execute("UPDATE users SET last_daily_bonus = ? WHERE id=?", (datetime.now().isoformat(), user_id))
    conn.commit()

# ---------- COMMAND HANDLERS ----------

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name
    add_user(user_id, username)

    # Referral check
    args = message.text.split()
    if len(args) > 1 and args[1].isdigit():
        ref_id = int(args[1])
        user_data = get_user(user_id)
        # рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд░реЗрдлрд░рд░ рдЦреБрдж рдХреЛ рд░реЗрдлрд░ рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛ рд╣реИ рдФрд░ рдЙрд╕рдиреЗ рдкрд╣рд▓реЗ рд╕реЗ рдХрд┐рд╕реА рдХреЛ рд░реЗрдлрд░ рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ
        if ref_id != user_id and (user_data[5] is None or user_data[5] == 0): # referred_by is None or 0
            add_referral(ref_id, user_id)
            try:
                bot.send_message(ref_id, f"ЁЯОЙ рдЖрдкрдХреЗ referral рд╕реЗ рдирдП user рдиреЗ join рдХрд┐рдпрд╛! рдЖрдкрдХреЛ {REFERRAL_POINTS} Coins рдорд┐рд▓реЗ тЬЕ")
            except Exception as e:
                print(f"тЭМ рд░реЗрдлрд░рд░ рдХреЛ рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ {ref_id}: {e}")
            bot.send_message(user_id, f"тЬЕ рдЖрдк {ref_id} рджреНрд╡рд╛рд░рд╛ рд░реЗрдлрд░ рдХрд┐рдП рдЧрдП рд╣реИрдВ рдФрд░ рдЖрдкрдХреЛ рднреА рдХреБрдЫ рдмреЛрдирд╕ рдорд┐рд▓ рд╕рдХрддрд╛ рд╣реИ (рдпрджрд┐ рд▓рд╛рдЧреВ рд╣реЛ)ред")

    # Welcome Text
    welcome_text = f"""
ЁЯОм *Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯОм

рдирдорд╕реНрддреЗ {message.from_user.first_name}!  

ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЛ, рдХреЙрдЗрди рдХрдорд╛рдУ рдФрд░  
ЁЯТ░ рдЕрдкрдирд╛ YouTube рдЪреИрдирд▓ рдореЛрдиреЗрдЯрд╛рдЗрдЬреЗрд╢рди рдХрд░рд╡рд╛рдУ тЬЕ  

ЁЯУМ *рдХрдорд╛рдИ рдирд┐рдпрдо:*  
тАв рдкреНрд░рддреНрдпреЗрдХ рд╡реАрдбрд┐рдпреЛ = 30 рдкреЙрдЗрдВрдЯреНрд╕  
тАв рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ = 100 рдкреЙрдЗрдВрдЯреНрд╕  

ЁЯСе *рд░реЗрдлрд░рд▓ рд╕рд┐рд╕реНрдЯрдо:*  
тАв рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ  
тАв рд╣рд░ рдирдП рдпреВрдЬрд╝рд░ рдкрд░ {REFERRAL_POINTS} рдкреЙрдЗрдВрдЯреНрд╕  

тЪая╕П *рдорд╣рддреНрд╡рдкреВрд░реНрдг:*  
рдмреЙрдЯ рдпреВрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░рдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред (рдЗрд╕ рд╕реБрд╡рд┐рдзрд╛ рдХреЛ рд▓рд╛рдЧреВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ рдЧреНрд░реБрдк рд╕рджрд╕реНрдпрддрд╛ рдЬрд╛рдВрдЪ рдЬреЛрдбрд╝рдиреА рд╣реЛрдЧреА)

Welcome ЁЯШК
"""

    # Inline buttons
    inline_kb = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("ЁЯОм Open WebApp", url=WEB_URL)
    invite_btn = types.InlineKeyboardButton("ЁЯСе Invite Friends", url=f"https://t.me/{BOT_USERNAME}?start={user_id}")
    inline_kb.add(web_btn, invite_btn)

    bot.send_message(user_id, welcome_text, parse_mode="Markdown", reply_markup=inline_kb)

    # Reply Keyboard
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("ЁЯПа Home", "ЁЯОБ Daily Bonus")
    menu.row("ЁЯзСтАНЁЯдЭтАНЁЯзС Invite", "ЁЯСд Profile")
    menu.row("ЁЯТ░ Wallet", "ЁЯУд Submit URL")
    bot.send_message(user_id, "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ рдЖрдЧреЗ рдмрдврд╝реЗрдВ:", reply_markup=menu)

# ---------- MESSAGE HANDLER (BUTTONS) ----------
@bot.message_handler(func=lambda msg: True)
def handle_buttons(message):
    user_id = message.chat.id
    user_data = get_user(user_id)
    if not user_data:
        add_user(user_id, message.from_user.username or message.from_user.first_name)
        return bot.send_message(user_id, "тЭМ рдЖрдкрдХрд╛ рдбреЗрдЯрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ /start рджрдмрд╛рдПрдБред")
    
    username, coins, refs, daily_points, last_daily_bonus_str, referred_by = user_data
    text = message.text

    if text == "ЁЯПа Home":
        # рдЖрдк рдпрд╣рд╛рдВ рдПрдХ рдЕрдзрд┐рдХ рд╡рд┐рд╕реНрддреГрдд рд╣реЛрдо рд╕рдВрджреЗрд╢ рдЬреЛрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВ
        bot.send_message(user_id, f"ЁЯОм Open WebApp: {WEB_URL}")
    
    elif text == "ЁЯОБ Daily Bonus":
        now = datetime.now()
        last_bonus_time = None
        if last_daily_bonus_str:
            last_bonus_time = datetime.fromisoformat(last_daily_bonus_str)

        # рдЬрд╛рдВрдЪреЗрдВ рдХрд┐ рдХреНрдпрд╛ 24 рдШрдВрдЯреЗ рдмреАрдд рдЪреБрдХреЗ рд╣реИрдВ
        if last_bonus_time and (now - last_bonus_time) < timedelta(hours=24):
            time_left = timedelta(hours=24) - (now - last_bonus_time)
            hours, remainder = divmod(int(time_left.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.send_message(user_id, f"тП░ рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╣реА рдЖрдЬ рдХрд╛ рджреИрдирд┐рдХ рдмреЛрдирд╕ рд▓реЗ рд▓рд┐рдпрд╛ рд╣реИред {hours} рдШрдВрдЯреЗ {minutes} рдорд┐рдирдЯ рдореЗрдВ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред")
        else:
            bonus = 30 # рджреИрдирд┐рдХ рдмреЛрдирд╕ рдХреЗ рд▓рд┐рдП рдирд┐рд╢реНрдЪрд┐рдд рд░рд╛рд╢рд┐

            # рдпрджрд┐ рджреИрдирд┐рдХ рдЕрдВрдХ рд╕реАрдорд╛ рдкрд╛рд░ рд╣реЛ рдЧрдИ рд╣реИ, рддреЛ рдмреЛрдирд╕ рди рджреЗрдВ рдпрд╛ рдЙрд╕реЗ рдХрдо рдХрд░реЗрдВ
            if daily_points >= 100: # 100 рджреИрдирд┐рдХ рд▓рд┐рдорд┐рдЯ
                bot.send_message(user_id, "тЪая╕П рдЖрдЬ рдХреА рджреИрдирд┐рдХ рдЕрдВрдХ рд╕реАрдорд╛ (100) рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИред рдХрд▓ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!")
                # рджреИрдирд┐рдХ рдмреЛрдирд╕ рдХреЛ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдпрд╣ рдЕрдЧрд▓реЗ рджрд┐рди рд╕реЗ рд╢реБрд░реВ рд╣реЛ рд╕рдХреЗ
                update_last_daily_bonus_time(user_id)
                # рджреИрдирд┐рдХ рдЕрдВрдХ рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдЕрдЧрд▓реЗ рджрд┐рди рд╕реЗ рдирдП рджреИрдирд┐рдХ рдЕрдВрдХ рдЬреЛрдбрд╝реЗ рдЬрд╛ рд╕рдХреЗрдВ
                reset_daily_points(user_id) 
            else:
                # рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдмреЛрдирд╕ рджреИрдирд┐рдХ рдЕрдВрдХ рд╕реАрдорд╛ рд╕реЗ рдЕрдзрд┐рдХ рди рд╣реЛ
                actual_bonus = min(bonus, 100 - daily_points)
                if actual_bonus > 0:
                    add_coins(user_id, actual_bonus)
                    update_last_daily_bonus_time(user_id)
                    bot.send_message(user_id, f"ЁЯОБ рдЖрдкрдиреЗ {actual_bonus} Coins Daily Bonus рдореЗрдВ рдкрд╛рдП тЬЕ")
                else:
                    bot.send_message(user_id, "тЪая╕П рдЖрдЬ рдХреА рджреИрдирд┐рдХ рдЕрдВрдХ рд╕реАрдорд╛ рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИред рдХрд▓ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!")
                    # рдпрджрд┐ рд╕реАрдорд╛ рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИ рд▓реЗрдХрд┐рди 24 рдШрдВрдЯреЗ рдирд╣реАрдВ рд╣реБрдП рд╣реИрдВ, рддреЛ рдмрд╕ рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдк рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
                    update_last_daily_bonus_time(user_id)
                    reset_daily_points(user_id)


    elif text == "ЁЯзСтАНЁЯдЭтАНЁЯзС Invite":
        ref_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        bot.send_message(user_id, f"ЁЯФЧ рдЖрдкрдХрд╛ Referral Link:\n`{ref_link}`\n\nрд╣рд░ invite рдкрд░ {REFERRAL_POINTS} Coins! рдЗрд╕реЗ рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рдХреЗ рд╕рд╛рде рд╢реЗрдпрд░ рдХрд░реЗрдВред", parse_mode="Markdown")

    elif text == "ЁЯСд Profile":
        profile_text = f"""
ЁЯСд *Profile*  

ЁЯЖФ ID: `{user_id}`  
ЁЯТ│ Balance: *{coins} Coins*  
ЁЯУК Daily Points (рдЖрдЬ рдХреЗ): *{daily_points}*  
ЁЯСе Referrals: *{refs}*  
"""
        bot.send_message(user_id, profile_text, parse_mode="Markdown")

    elif text == "ЁЯТ░ Wallet":
        bot.send_message(user_id, f"ЁЯТ│ рдЖрдкрдХреЗ Wallet рдореЗрдВ Coins: {coins}")

    elif text == "ЁЯУд Submit URL":
        if coins < LINK_SUBMIT_COST:
            bot.send_message(user_id, f"тЭМ рдЖрдкрдХреЗ рдкрд╛рд╕ {LINK_SUBMIT_COST} Coins рдирд╣реАрдВ рд╣реИрдВред рдЖрдкрдХреЛ рдФрд░ рдХрдорд╛рдиреЗ рдХреА рдЬрд╝рд░реВрд░рдд рд╣реИред")
        else:
            msg = bot.send_message(user_id, "ЁЯУд рдЕрдкрдирд╛ YouTube рд╡реАрдбрд┐рдпреЛ рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВ (https:// рд╕реЗ рд╢реБрд░реВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП):")
            bot.register_next_step_handler(msg, submit_url_step)
    else:
        # рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдиреЗ рдПрдХ рдЕрдЬреНрдЮрд╛рдд рдмрдЯрди рджрдмрд╛рдпрд╛ рдпрд╛ рдПрдХ рд╕рд╛рдорд╛рдиреНрдп рдкрд╛рда рднреЗрдЬрд╛
        bot.send_message(user_id, "тЭМ Invalid Option! рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")

def submit_url_step(message):
    user_id = message.chat.id
    url = message.text.strip()

    # URL рд╕рддреНрдпрд╛рдкрди
    if not url.startswith("https://") or not ("youtube.com/watch" in url or "youtu.be/" in url):
        bot.send_message(user_id, "тЭМ рдХреЗрд╡рд▓ рдПрдХ рд╡реИрдз YouTube рд╡реАрдбрд┐рдпреЛ URL рднреЗрдЬреЗрдВ (https:// рд╕реЗ рд╢реБрд░реВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП)ред")
        return

    user_data = get_user(user_id)
    if not user_data or user_data[1] < LINK_SUBMIT_COST: # рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдкрд╛рд╕ рдкрд░реНрдпрд╛рдкреНрдд рд╕рд┐рдХреНрдХреЗ рд╣реИрдВ
        bot.send_message(user_id, f"тЭМ рдЖрдкрдХреЗ рдкрд╛рд╕ рдЗрд╕ рд▓рд┐рдВрдХ рдХреЛ рд╕рдмрдорд┐рдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд░реНрдпрд╛рдкреНрдд рд╕рд┐рдХреНрдХреЗ рдирд╣реАрдВ рд╣реИрдВред рдЖрд╡рд╢реНрдпрдХ: {LINK_SUBMIT_COST} Coinsред")
        return

    try:
        add_coins(user_id, -LINK_SUBMIT_COST) # рд╕рд┐рдХреНрдХреЗ рдШрдЯрд╛рдПрдБ
        cursor.execute("INSERT INTO submissions (user_id, url) VALUES (?, ?)", (user_id, url))
        conn.commit()

        bot.send_message(user_id, f"тЬЕ рдЖрдкрдХрд╛ рд▓рд┐рдВрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ:\n`{url}`\nрдЖрдкрдХреЗ рдЕрдХрд╛рдЙрдВрдЯ рд╕реЗ {LINK_SUBMIT_COST} Coins рдХрд╛рдЯ рд▓рд┐рдП рдЧрдП рд╣реИрдВред", parse_mode="Markdown")
        
        # рдПрдбрдорд┐рди рдХреЛ рд╕реВрдЪрд┐рдд рдХрд░реЗрдВ
        if ADMIN_ID:
            try:
                bot.send_message(ADMIN_ID, f"ЁЯФФ *рдирдпрд╛ URL рд╕рдмрдорд┐рд╢рди!* ЁЯФФ\n\nUser ID: `{user_id}`\nUsername: @{message.from_user.username or 'N/A'}\nURL: `{url}`\n\nрдЗрд╕реЗ Admin Panel рд╕реЗ рдореИрдиреЗрдЬ рдХрд░реЗрдВ: /admin", parse_mode="Markdown")
            except Exception as e:
                print(f"тЭМ рдПрдбрдорд┐рди рдХреЛ рд╕рдмрдорд┐рд╢рди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реВрдЪрд┐рдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")
        else:
            print("тЪая╕П рдЪреЗрддрд╛рд╡рдиреА: ADMIN_ID рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдирд╣реАрдВ рд╣реИ, рдПрдбрдорд┐рди рдХреЛ URL рд╕рдмрдорд┐рд╢рди рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реВрдЪрд┐рдд рдирд╣реАрдВ рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ред")

    except Exception as e:
        bot.send_message(user_id, f"тЭМ рд▓рд┐рдВрдХ рд╕рдмрдорд┐рдЯ рдХрд░рддреЗ рд╕рдордп рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
        print(f"тЭМ URL рд╕рдмрдорд┐рд╢рди рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")

# ---------- ADMIN PANEL ----------
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "тЭМ рдПрдХреНрд╕реЗрд╕ рдЕрд╕реНрд╡реАрдХреГрддред рдЖрдк рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИрдВред")
    
    # рдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдФрд░ рд╕рд┐рдХреНрдХреЗ
    cursor.execute("SELECT COUNT(*), SUM(coins) FROM users")
    total_users, total_coins = cursor.fetchone()
    total_users = total_users or 0
    total_coins = total_coins or 0

    # рд▓рдВрдмрд┐рдд рд╕рдмрдорд┐рд╢рди
    cursor.execute("SELECT id, user_id, url, status, submission_date FROM submissions WHERE status='pending'")
    pending_submissions = cursor.fetchall()

    report = f"""
ЁЯУК *рдПрдбрдорд┐рди рдкреИрдирд▓ рд░рд┐рдкреЛрд░реНрдЯ*  

ЁЯСе рдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: *{total_users}*  
ЁЯТ░ рд╡рд┐рддрд░рд┐рдд рдХрд┐рдП рдЧрдП рдХреБрд▓ рд╕рд┐рдХреНрдХреЗ: *{total_coins}*  

ЁЯУЭ рд▓рдВрдмрд┐рдд рд╕рдмрдорд┐рд╢рди: *{len(pending_submissions)}*
"""
    bot.send_message(message.chat.id, report, parse_mode="Markdown")

    if pending_submissions:
        bot.send_message(message.chat.id, "*рд▓рдВрдмрд┐рдд рд╕рдмрдорд┐рд╢рди:*", parse_mode="Markdown")
        for sub in pending_submissions:
            sub_id, u_id, url, status, sub_date = sub
            
            # рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рдирд╛рдо рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
            user_info = get_user(u_id)
            username = user_info[0] if user_info else "Unknown User"

            submission_detail = f"""
ID: `{sub_id}`
User ID: `{u_id}` (@{username})
URL: `{url}`
рд╕реНрдерд┐рддрд┐: *{status}*
рддрд┐рдерд┐: {sub_date}
"""
            # рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП рдХрд╛рд░реНрд░рд╡рд╛рдИ рдмрдЯрди
            admin_kb = types.InlineKeyboardMarkup()
            approve_btn = types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_{sub_id}")
            reject_btn = types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_{sub_id}")
            admin_kb.add(approve_btn, reject_btn)
            
            bot.send_message(message.chat.id, submission_detail, parse_mode="Markdown", reply_markup=admin_kb)
    else:
        bot.send_message(message.chat.id, "ЁЯОЙ рдХреЛрдИ рд▓рдВрдмрд┐рдд рд╕рдмрдорд┐рд╢рди рдирд╣реАрдВ рд╣реИред")

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_') or call.data.startswith('reject_'))
def handle_submission_callback(call):
    admin_id = call.from_user.id
    if admin_id != ADMIN_ID:
        bot.answer_callback_query(call.id, "тЭМ рдПрдХреНрд╕реЗрд╕ рдЕрд╕реНрд╡реАрдХреГрддред рдЖрдк рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИрдВред")
        return

    action, sub_id_str = call.data.split('_')
    sub_id = int(sub_id_str)

    cursor.execute("SELECT user_id, url, status FROM submissions WHERE id=?", (sub_id,))
    submission = cursor.fetchone()

    if not submission:
        bot.answer_callback_query(call.id, "тЭМ рд╕рдмрдорд┐рд╢рди рдирд╣реАрдВ рдорд┐рд▓рд╛ред")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, 
                              text=f"ID: `{sub_id}` - рд╕рдмрдорд┐рд╢рди рдирд╣реАрдВ рдорд┐рд▓рд╛ рдпрд╛ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ред", parse_mode="Markdown")
        return

    user_id, url, current_status = submission

    if current_status != 'pending':
        bot.answer_callback_query(call.id, f"рдпрд╣ рд╕рдмрдорд┐рд╢рди рдкрд╣рд▓реЗ рд╣реА {current_status} рд╣реЛ рдЪреБрдХрд╛ рд╣реИред")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"ID: `{sub_id}`\nUser ID: `{user_id}`\nURL: `{url}`\nрд╕реНрдерд┐рддрд┐: *{current_status}* (рдкрд╣рд▓реЗ рд╣реА рд╕рдВрд╕рд╛рдзрд┐рдд)\n", parse_mode="Markdown")
        return

    new_status = 'approved' if action == 'approve' else 'rejected'
    cursor.execute("UPDATE submissions SET status=? WHERE id=?", (new_status, sub_id))
    conn.commit()

    user_info = get_user(user_id)
    username = user_info[0] if user_info else "Unknown User"

    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"ID: `{sub_id}`\nUser ID: `{user_id}` (@{username})\nURL: `{url}`\nрд╕реНрдерд┐рддрд┐: *{new_status.upper()}*", parse_mode="Markdown")
    bot.answer_callback_query(call.id, f"рд╕рдмрдорд┐рд╢рди {new_status} рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ред")

    # рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рд╕реВрдЪрд┐рдд рдХрд░реЗрдВ
    try:
        if new_status == 'approved':
            bot.send_message(user_id, f"тЬЕ рдЖрдкрдХрд╛ URL рд╕рдмрдорд┐рд╢рди (`{url}`) рдПрдбрдорд┐рди рджреНрд╡рд╛рд░рд╛ *рд╕реНрд╡реАрдХреГрдд* рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ!", parse_mode="Markdown")
        else:
            bot.send_message(user_id, f"тЭМ рдЖрдкрдХрд╛ URL рд╕рдмрдорд┐рд╢рди (`{url}`) рдПрдбрдорд┐рди рджреНрд╡рд╛рд░рд╛ *рдЕрд╕реНрд╡реАрдХреГрдд* рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред", parse_mode="Markdown")
    except Exception as e:
        print(f"тЭМ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {user_id} рдХреЛ рд╕рдмрдорд┐рд╢рди рдЕрдкрдбреЗрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реВрдЪрд┐рдд рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {e}")

# ---------- RUN ----------
if __name__ == '__main__':
    print("ЁЯдЦ Bot is running...")
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"тЭМ рдмреЙрдЯ рдЪрд▓рд╛рддреЗ рд╕рдордп рдЧрдВрднреАрд░ рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}")
        # рдпрд╣рд╛рдВ рдЖрдк рддреНрд░реБрдЯрд┐ рд▓реЙрдЧрд┐рдВрдЧ рдпрд╛ рдкреБрдирд░рд╛рд░рдВрдн рддрд░реНрдХ рдЬреЛрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВ