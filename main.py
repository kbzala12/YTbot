# main.py
import os
import telebot
from telebot import types
import sqlite3
from config import *

# ---------- BOT INIT ----------
bot = telebot.TeleBot(BOT_TOKEN)

# ---------- KEEP ALIVE ----------
from keep_alive import keep_alive
keep_alive()

# ---------- DB SETUP ----------
conn = sqlite3.connect("bot.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    coins INTEGER DEFAULT 0,
    referrals INTEGER DEFAULT 0,
    daily_points INTEGER DEFAULT 0
)
""")
conn.commit()

# ---------- HELPERS ----------
def get_user(user_id):
    cursor.execute("SELECT username, coins, referrals, daily_points FROM users WHERE id=?", (user_id,))
    return cursor.fetchone()

def add_user(user_id, username):
    cursor.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()

def add_coins(user_id, amount):
    cursor.execute("UPDATE users SET coins = coins + ?, daily_points = daily_points + ? WHERE id=?", 
                   (amount, amount, user_id))
    conn.commit()

def add_referral(ref_id):
    cursor.execute("UPDATE users SET referrals = referrals + 1, coins = coins + 100 WHERE id=?", (ref_id,))
    conn.commit()

# ---------- START ----------
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name
    add_user(user_id, username)

    # Referral check
    args = message.text.split()
    if len(args) > 1 and args[1].isdigit():
        ref_id = int(args[1])
        if ref_id != user_id:
            add_referral(ref_id)
            bot.send_message(ref_id, f"ЁЯОЙ рдЖрдкрдХреЗ referral рд╕реЗ рдирдП user рдиреЗ join рдХрд┐рдпрд╛! рдЖрдкрдХреЛ 100 Coins рдорд┐рд▓реЗ тЬЕ")

    # Welcome Text
    welcome_text = f"""
ЁЯОм *Video Coin Earner Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!* ЁЯОм

рдирдорд╕реНрддреЗ {message.from_user.first_name}!  

ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЛ, рдХреЙрдЗрди рдХрдорд╛рдУ рдФрд░  
ЁЯТ░ рдЕрдкрдирд╛ YouTube рдЪреИрдирд▓ рдореЛрдиреЗрдЯрд╛рдЗрдЬреЗрд╢рди рдХрд░рд╡рд╛рдУ тЬЕ  

тЪая╕П *рдорд╣рддреНрд╡рдкреВрд░реНрдг:*  
рдмреЙрдЯ рдпреВрдЬрд╝ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░рдирд╛ рдЬрд╝рд░реВрд░реА рд╣реИред  
"""

    # Inline buttons
    inline_kb = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("ЁЯОм Open WebApp", url=WEB_URL)
    group_btn = types.InlineKeyboardButton("ЁЯСе Join Group", url=GROUP_URL)
    inline_kb.add(web_btn, group_btn)

    bot.send_message(user_id, welcome_text, parse_mode="Markdown", reply_markup=inline_kb)

    # Reply Keyboard
    menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu.row("ЁЯПа Home", "ЁЯОБ Daily Bonus")
    menu.row("ЁЯзСтАНЁЯдЭтАНЁЯзС Invite", "ЁЯСд Profile")
    menu.row("ЁЯТ░ Wallet", "ЁЯУд Submit URL")
    bot.send_message(user_id, "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ рдЖрдЧреЗ рдмрдврд╝реЗрдВ:", reply_markup=menu)

# ---------- MESSAGE HANDLER ----------
@bot.message_handler(func=lambda msg: True)
def handle_buttons(message):
    user_id = message.chat.id
    user = get_user(user_id)
    if not user:
        return bot.send_message(user_id, "тЭМ рдкрд╣рд▓реЗ /start рджрдмрд╛рдПрдБред")
    
    text = message.text
    if text == "ЁЯПа Home":
        bot.send_message(user_id, f"ЁЯОм Open WebApp: {WEB_URL}")
    elif text == "ЁЯОБ Daily Bonus":
        username, coins, refs, daily_points = user
        if daily_points + 30 <= 100:
            add_coins(user_id, 30)
            bot.send_message(user_id, "ЁЯОБ рдЖрдкрдиреЗ 30 Coins Daily Bonus рдореЗрдВ рдкрд╛рдП тЬЕ")
        else:
            bot.send_message(user_id, "тЪая╕П рдЖрдЬ рдХреА daily limit рдкреВрд░реА рд╣реЛ рдЧрдИ рд╣реИред рдХрд▓ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ!")
    elif text == "ЁЯзСтАНЁЯдЭтАНЁЯзС Invite":
        ref_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
        bot.send_message(user_id, f"ЁЯФЧ рдЖрдкрдХрд╛ Referral Link:\n{ref_link}\nрд╣рд░ рдирдП user рдкрд░ 100 Coins!")
    elif text == "ЁЯСд Profile":
        username, coins, refs, daily_points = user
        text = f"""
ЁЯСд *Profile*  

ЁЯЖФ ID: `{user_id}`  
ЁЯТ│ Balance: *{coins} Coins*  
ЁЯУЕ Daily Points: *{daily_points}*  
ЁЯСе Referrals: *{refs}*  
"""
        bot.send_message(user_id, text, parse_mode="Markdown")
    elif text == "ЁЯТ░ Wallet":
        username, coins, refs, daily_points = user
        bot.send_message(user_id, f"ЁЯТ│ рдЖрдкрдХреЗ Wallet рдореЗрдВ Coins: {coins}")
    elif text == "ЁЯУд Submit URL":
        username, coins, refs, daily_points = user
        if coins < 1280:
            bot.send_message(user_id, f"тЭМ рдЖрдкрдХреЗ рдкрд╛рд╕ 1280 Coins рдирд╣реАрдВ рд╣реИрдВред")
        else:
            msg = bot.send_message(user_id, "ЁЯУд рдЕрдкрдирд╛ рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВ (1280 Coins рдореЗрдВ):")
            bot.register_next_step_handler(msg, submit_url)
    else:
        bot.send_message(user_id, "тЭМ Invalid Option! рдиреАрдЪреЗ рдХреЗ buttons рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВред")

def submit_url(message):
    user_id = message.chat.id
    url = message.text
    add_coins(user_id, -1280)  # Deduct 1280 coins
    bot.send_message(user_id, f"тЬЕ рдЖрдкрдХрд╛ рд▓рд┐рдВрдХ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛:\n{url}")
    bot.send_message(ADMIN_ID, f"ЁЯФФ рдирдпрд╛ URL submit: {url}\nUser ID: {user_id}\nUsername: {message.from_user.username}")

# ---------- ADMIN PANEL ----------
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.chat.id != ADMIN_ID:
        return bot.send_message(message.chat.id, "тЭМ Access Denied.")
    cursor.execute("SELECT COUNT(*), SUM(coins) FROM users")
    total_users, total_coins = cursor.fetchone()
    total_users = total_users or 0
    total_coins = total_coins or 0
    report = f"""
ЁЯУК *Admin Panel*  

ЁЯСе Total Users: *{total_users}*  
ЁЯТ░ Total Coins Given: *{total_coins}*  
"""
    bot.send_message(message.chat.id, report, parse_mode="Markdown")

# ---------- RUN ----------
print("ЁЯдЦ Bot setup complete. Polling is disabled to prevent running, DB remains active.")
# bot.infinity_polling()  # Commented to prevent running automatically