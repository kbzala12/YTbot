import telebot
from telebot import types
import sqlite3
from config import *
from keep_alive import keep_alive

# тЬЕ Bot initialize
bot = telebot.TeleBot(BOT_TOKEN)

# тЬЕ Database setup
def init_db():
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                coins INTEGER DEFAULT 0,
                referrals INTEGER DEFAULT 0
                )""")
    c.execute("""CREATE TABLE IF NOT EXISTS submissions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                url TEXT,
                status TEXT DEFAULT 'pending'
                )""")
    conn.commit()
    conn.close()

init_db()

# тЬЕ Add user if not exists
def add_user(user_id):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, coins, referrals) VALUES (?, ?, ?)", (user_id, 50, 0))  # рдмреЛрдирд╕ 50 рдХреЙрдЗрди
    conn.commit()
    conn.close()

# тЬЕ Get coins
def get_coins(user_id):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT coins FROM users WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 0

# тЬЕ Update coins
def update_coins(user_id, coins):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("UPDATE users SET coins=? WHERE user_id=?", (coins, user_id))
    conn.commit()
    conn.close()

# тЬЕ Start Command (with referral)
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    args = message.text.split()

    add_user(user_id)

    # Referral рд╕рд┐рд╕реНрдЯрдо
    if len(args) > 1:
        ref_id = int(args[1])
        if ref_id != user_id:
            conn = sqlite3.connect("bot.db")
            c = conn.cursor()
            c.execute("UPDATE users SET coins = coins + 100, referrals = referrals + 1 WHERE user_id=?", (ref_id,))
            conn.commit()
            conn.close()
            bot.send_message(ref_id, f"ЁЯОЙ рдЖрдкрдХреЛ рд░реЗрдлрд╝рд░рд▓ рд╕реЗ 100 рдХреЙрдЗрди рдорд┐рд▓реЗ! {message.from_user.first_name} рдиреЗ рдЖрдкрдХрд╛ рд▓рд┐рдВрдХ рдЬреЙрдЗрди рдХрд┐рдпрд╛ред")

    keyboard = types.InlineKeyboardMarkup()
    web_btn = types.InlineKeyboardButton("ЁЯМР Open WebApp", url=WEB_URL)
    join_btn = types.InlineKeyboardButton("ЁЯУв Join Group", url="https://t.me/boomupbot10")
    keyboard.add(web_btn)
    keyboard.add(join_btn)

    bot.send_message(
        user_id,
        f"ЁЯСЛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ {message.from_user.first_name}!\n\n"
        f"ЁЯСЙ рдЖрдкрдХрд╛ рдмреИрд▓реЗрдВрд╕: {get_coins(user_id)} рдХреЙрдЗрди\n\n"
        "ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рд╕реЗ WebApp рдЦреЛрд▓реЗрдВ рдФрд░ Group Join рдХрд░реЗрдВред",
        reply_markup=keyboard
    )

# тЬЕ Balance check
@bot.message_handler(commands=['balance'])
def balance(message):
    coins = get_coins(message.chat.id)
    bot.send_message(message.chat.id, f"ЁЯТ░ рдЖрдкрдХреЗ рдкрд╛рд╕ {coins} рдХреЙрдЗрди рд╣реИрдВред")

# тЬЕ Submit URL
@bot.message_handler(commands=['submit'])
def submit(message):
    user_id = message.chat.id
    coins = get_coins(user_id)

    if coins < 1280:
        bot.send_message(user_id, "тЭМ рдЖрдкрдХреЗ рдкрд╛рд╕ рдкрд░реНрдпрд╛рдкреНрдд рдХреЙрдЗрди рдирд╣реАрдВ рд╣реИрдВ (1280 рдХреА рдЬрд╝рд░реВрд░рдд рд╣реИ)ред")
        return

    msg = bot.send_message(user_id, "ЁЯФЧ рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ YouTube URL рднреЗрдЬреЗрдВ:")
    bot.register_next_step_handler(msg, process_url)

def process_url(message):
    user_id = message.chat.id
    url = message.text
    coins = get_coins(user_id)

    if coins >= 1280:
        update_coins(user_id, coins - 1280)
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("INSERT INTO submissions (user_id, url, status) VALUES (?, ?, ?)", (user_id, url, "pending"))
        conn.commit()
        conn.close()
        bot.send_message(user_id, "тЬЕ рдЖрдкрдХрд╛ URL рд╕рдмрдорд┐рдЯ рд╣реЛ рдЧрдпрд╛ рд╣реИ рдФрд░ рдПрдбрдорд┐рди рдХреА рдЕрдкреНрд░реВрд╡рд▓ рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рд╣реИред")
        bot.send_message(ADMIN_ID, f"ЁЯФФ рдирдпрд╛ рд╕рдмрдорд┐рд╢рди рдЖрдпрд╛ рд╣реИ:\nЁЯСд User: {user_id}\nЁЯФЧ URL: {url}")
    else:
        bot.send_message(user_id, "тЭМ рдЖрдкрдХреЗ рдкрд╛рд╕ рдкрд░реНрдпрд╛рдкреНрдд рдХреЙрдЗрди рдирд╣реАрдВ рд╣реИрдВред")

# тЬЕ Admin Panel
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if str(message.chat.id) == str(ADMIN_ID):
        bot.send_message(message.chat.id, "тЪЩя╕П Admin Panel:\n\n/approve <id> - рд╕рдмрдорд┐рд╢рди рдЕрдкреНрд░реВрд╡ рдХрд░реЗрдВ\n/reject <id> - рд╕рдмрдорд┐рд╢рди рд░рд┐рдЬреЗрдХреНрдЯ рдХрд░реЗрдВ")
    else:
        bot.send_message(message.chat.id, "тЭМ рдпрд╣ рдХрдорд╛рдВрдб рд╕рд┐рд░реНрдл Admin рдХреЗ рд▓рд┐рдП рд╣реИред")

# тЬЕ Approve submission
@bot.message_handler(commands=['approve'])
def approve(message):
    if str(message.chat.id) != str(ADMIN_ID):
        return

    args = message.text.split()
    if len(args) < 2:
        bot.send_message(message.chat.id, "тЭМ рд╕рдмрдорд┐рд╢рди ID рджреАрдЬрд┐рдПред")
        return

    sub_id = int(args[1])
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("UPDATE submissions SET status='approved' WHERE id=?", (sub_id,))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, f"тЬЕ рд╕рдмрдорд┐рд╢рди #{sub_id} рдЕрдкреНрд░реВрд╡ рд╣реЛ рдЧрдпрд╛ред")

# тЬЕ Reject submission
@bot.message_handler(commands=['reject'])
def reject(message):
    if str(message.chat.id) != str(ADMIN_ID):
        return

    args = message.text.split()
    if len(args) < 2:
        bot.send_message(message.chat.id, "тЭМ рд╕рдмрдорд┐рд╢рди ID рджреАрдЬрд┐рдПред")
        return

    sub_id = int(args[1])
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("UPDATE submissions SET status='rejected' WHERE id=?", (sub_id,))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, f"тЭМ рд╕рдмрдорд┐рд╢рди #{sub_id} рд░рд┐рдЬреЗрдХреНрдЯ рд╣реЛ рдЧрдпрд╛ред")

# тЬЕ Run bot
keep_alive()
bot.polling(non_stop=True)